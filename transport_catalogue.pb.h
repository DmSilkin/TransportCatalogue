// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transport_5fcatalogue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transport_5fcatalogue_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(int index);
namespace transport_catalogue_serialize {
class Bus;
struct BusDefaultTypeInternal;
extern BusDefaultTypeInternal _Bus_default_instance_;
class Color;
struct ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Coordinates;
struct CoordinatesDefaultTypeInternal;
extern CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
class Distance;
struct DistanceDefaultTypeInternal;
extern DistanceDefaultTypeInternal _Distance_default_instance_;
class Edge;
struct EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgesInfo;
struct EdgesInfoDefaultTypeInternal;
extern EdgesInfoDefaultTypeInternal _EdgesInfo_default_instance_;
class Graph;
struct GraphDefaultTypeInternal;
extern GraphDefaultTypeInternal _Graph_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class RenderSettings;
struct RenderSettingsDefaultTypeInternal;
extern RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
class Rgba;
struct RgbaDefaultTypeInternal;
extern RgbaDefaultTypeInternal _Rgba_default_instance_;
class Router;
struct RouterDefaultTypeInternal;
extern RouterDefaultTypeInternal _Router_default_instance_;
class RoutingSettings;
struct RoutingSettingsDefaultTypeInternal;
extern RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
class Stop;
struct StopDefaultTypeInternal;
extern StopDefaultTypeInternal _Stop_default_instance_;
class StopsToVertex;
struct StopsToVertexDefaultTypeInternal;
extern StopsToVertexDefaultTypeInternal _StopsToVertex_default_instance_;
class TransportCatalogue;
struct TransportCatalogueDefaultTypeInternal;
extern TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> ::transport_catalogue_serialize::Bus* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Bus>(Arena*);
template<> ::transport_catalogue_serialize::Color* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Color>(Arena*);
template<> ::transport_catalogue_serialize::Coordinates* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Coordinates>(Arena*);
template<> ::transport_catalogue_serialize::Distance* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Distance>(Arena*);
template<> ::transport_catalogue_serialize::Edge* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Edge>(Arena*);
template<> ::transport_catalogue_serialize::EdgesInfo* Arena::CreateMaybeMessage<::transport_catalogue_serialize::EdgesInfo>(Arena*);
template<> ::transport_catalogue_serialize::Graph* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Graph>(Arena*);
template<> ::transport_catalogue_serialize::Point* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Point>(Arena*);
template<> ::transport_catalogue_serialize::RenderSettings* Arena::CreateMaybeMessage<::transport_catalogue_serialize::RenderSettings>(Arena*);
template<> ::transport_catalogue_serialize::Rgba* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Rgba>(Arena*);
template<> ::transport_catalogue_serialize::Router* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Router>(Arena*);
template<> ::transport_catalogue_serialize::RoutingSettings* Arena::CreateMaybeMessage<::transport_catalogue_serialize::RoutingSettings>(Arena*);
template<> ::transport_catalogue_serialize::Stop* Arena::CreateMaybeMessage<::transport_catalogue_serialize::Stop>(Arena*);
template<> ::transport_catalogue_serialize::StopsToVertex* Arena::CreateMaybeMessage<::transport_catalogue_serialize::StopsToVertex>(Arena*);
template<> ::transport_catalogue_serialize::TransportCatalogue* Arena::CreateMaybeMessage<::transport_catalogue_serialize::TransportCatalogue>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace transport_catalogue_serialize {

// ===================================================================

class Coordinates PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Coordinates) */ {
 public:
  inline Coordinates() : Coordinates(nullptr) {}
  virtual ~Coordinates();
  explicit constexpr Coordinates(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coordinates(const Coordinates& from);
  Coordinates(Coordinates&& from) noexcept
    : Coordinates() {
    *this = ::std::move(from);
  }

  inline Coordinates& operator=(const Coordinates& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coordinates& operator=(Coordinates&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Coordinates& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coordinates* internal_default_instance() {
    return reinterpret_cast<const Coordinates*>(
               &_Coordinates_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Coordinates& a, Coordinates& b) {
    a.Swap(&b);
  }
  inline void Swap(Coordinates* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coordinates* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Coordinates* New() const final {
    return CreateMaybeMessage<Coordinates>(nullptr);
  }

  Coordinates* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Coordinates>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Coordinates& from);
  void MergeFrom(const Coordinates& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coordinates* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Coordinates";
  }
  protected:
  explicit Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Coordinates)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Stop PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Stop) */ {
 public:
  inline Stop() : Stop(nullptr) {}
  virtual ~Stop();
  explicit constexpr Stop(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Stop(const Stop& from);
  Stop(Stop&& from) noexcept
    : Stop() {
    *this = ::std::move(from);
  }

  inline Stop& operator=(const Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stop& operator=(Stop&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stop& default_instance() {
    return *internal_default_instance();
  }
  static inline const Stop* internal_default_instance() {
    return reinterpret_cast<const Stop*>(
               &_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stop& a, Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(Stop* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stop* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stop* New() const final {
    return CreateMaybeMessage<Stop>(nullptr);
  }

  Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stop& from);
  void MergeFrom(const Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Stop";
  }
  protected:
  explicit Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCoordinatesFieldNumber = 2,
  };
  // bytes name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_serialize.Coordinates coordinates = 2;
  bool has_coordinates() const;
  private:
  bool _internal_has_coordinates() const;
  public:
  void clear_coordinates();
  const ::transport_catalogue_serialize::Coordinates& coordinates() const;
  ::transport_catalogue_serialize::Coordinates* release_coordinates();
  ::transport_catalogue_serialize::Coordinates* mutable_coordinates();
  void set_allocated_coordinates(::transport_catalogue_serialize::Coordinates* coordinates);
  private:
  const ::transport_catalogue_serialize::Coordinates& _internal_coordinates() const;
  ::transport_catalogue_serialize::Coordinates* _internal_mutable_coordinates();
  public:
  void unsafe_arena_set_allocated_coordinates(
      ::transport_catalogue_serialize::Coordinates* coordinates);
  ::transport_catalogue_serialize::Coordinates* unsafe_arena_release_coordinates();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Stop)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::transport_catalogue_serialize::Coordinates* coordinates_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Bus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Bus) */ {
 public:
  inline Bus() : Bus(nullptr) {}
  virtual ~Bus();
  explicit constexpr Bus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Bus(const Bus& from);
  Bus(Bus&& from) noexcept
    : Bus() {
    *this = ::std::move(from);
  }

  inline Bus& operator=(const Bus& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bus& operator=(Bus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bus& default_instance() {
    return *internal_default_instance();
  }
  static inline const Bus* internal_default_instance() {
    return reinterpret_cast<const Bus*>(
               &_Bus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Bus& a, Bus& b) {
    a.Swap(&b);
  }
  inline void Swap(Bus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Bus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Bus* New() const final {
    return CreateMaybeMessage<Bus>(nullptr);
  }

  Bus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bus& from);
  void MergeFrom(const Bus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Bus";
  }
  protected:
  explicit Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRawRouteFieldNumber = 4,
    kRouteFieldNumber = 5,
    kNumberFieldNumber = 3,
    kUniqueStopsFieldNumber = 1,
    kStopsNumberFieldNumber = 2,
    kDistanceFieldNumber = 7,
    kIsRoundTripFieldNumber = 6,
  };
  // repeated bytes raw_route = 4;
  int raw_route_size() const;
  private:
  int _internal_raw_route_size() const;
  public:
  void clear_raw_route();
  const std::string& raw_route(int index) const;
  std::string* mutable_raw_route(int index);
  void set_raw_route(int index, const std::string& value);
  void set_raw_route(int index, std::string&& value);
  void set_raw_route(int index, const char* value);
  void set_raw_route(int index, const void* value, size_t size);
  std::string* add_raw_route();
  void add_raw_route(const std::string& value);
  void add_raw_route(std::string&& value);
  void add_raw_route(const char* value);
  void add_raw_route(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& raw_route() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_raw_route();
  private:
  const std::string& _internal_raw_route(int index) const;
  std::string* _internal_add_raw_route();
  public:

  // repeated .transport_catalogue_serialize.Stop route = 5;
  int route_size() const;
  private:
  int _internal_route_size() const;
  public:
  void clear_route();
  ::transport_catalogue_serialize::Stop* mutable_route(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
      mutable_route();
  private:
  const ::transport_catalogue_serialize::Stop& _internal_route(int index) const;
  ::transport_catalogue_serialize::Stop* _internal_add_route();
  public:
  const ::transport_catalogue_serialize::Stop& route(int index) const;
  ::transport_catalogue_serialize::Stop* add_route();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
      route() const;

  // bytes number = 3;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const void* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // uint32 unique_stops = 1;
  void clear_unique_stops();
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stops() const;
  void set_unique_stops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_unique_stops() const;
  void _internal_set_unique_stops(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stops_number = 2;
  void clear_stops_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 stops_number() const;
  void set_stops_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stops_number() const;
  void _internal_set_stops_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double distance = 7;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // bool is_round_trip = 6;
  void clear_is_round_trip();
  bool is_round_trip() const;
  void set_is_round_trip(bool value);
  private:
  bool _internal_is_round_trip() const;
  void _internal_set_is_round_trip(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Bus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> raw_route_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop > route_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 unique_stops_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stops_number_;
  double distance_;
  bool is_round_trip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Distance PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Distance) */ {
 public:
  inline Distance() : Distance(nullptr) {}
  virtual ~Distance();
  explicit constexpr Distance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Distance(const Distance& from);
  Distance(Distance&& from) noexcept
    : Distance() {
    *this = ::std::move(from);
  }

  inline Distance& operator=(const Distance& from) {
    CopyFrom(from);
    return *this;
  }
  inline Distance& operator=(Distance&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Distance& default_instance() {
    return *internal_default_instance();
  }
  static inline const Distance* internal_default_instance() {
    return reinterpret_cast<const Distance*>(
               &_Distance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Distance& a, Distance& b) {
    a.Swap(&b);
  }
  inline void Swap(Distance* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Distance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Distance* New() const final {
    return CreateMaybeMessage<Distance>(nullptr);
  }

  Distance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Distance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Distance& from);
  void MergeFrom(const Distance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Distance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Distance";
  }
  protected:
  explicit Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kDistanceFieldNumber = 3,
  };
  // bytes from = 1;
  void clear_from();
  const std::string& from() const;
  void set_from(const std::string& value);
  void set_from(std::string&& value);
  void set_from(const char* value);
  void set_from(const void* value, size_t size);
  std::string* mutable_from();
  std::string* release_from();
  void set_allocated_from(std::string* from);
  private:
  const std::string& _internal_from() const;
  void _internal_set_from(const std::string& value);
  std::string* _internal_mutable_from();
  public:

  // bytes to = 2;
  void clear_to();
  const std::string& to() const;
  void set_to(const std::string& value);
  void set_to(std::string&& value);
  void set_to(const char* value);
  void set_to(const void* value, size_t size);
  std::string* mutable_to();
  std::string* release_to();
  void set_allocated_to(std::string* to);
  private:
  const std::string& _internal_to() const;
  void _internal_set_to(const std::string& value);
  std::string* _internal_mutable_to();
  public:

  // double distance = 3;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Distance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr from_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr to_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  virtual ~Point();
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Rgba PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Rgba) */ {
 public:
  inline Rgba() : Rgba(nullptr) {}
  virtual ~Rgba();
  explicit constexpr Rgba(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Rgba(const Rgba& from);
  Rgba(Rgba&& from) noexcept
    : Rgba() {
    *this = ::std::move(from);
  }

  inline Rgba& operator=(const Rgba& from) {
    CopyFrom(from);
    return *this;
  }
  inline Rgba& operator=(Rgba&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Rgba& default_instance() {
    return *internal_default_instance();
  }
  static inline const Rgba* internal_default_instance() {
    return reinterpret_cast<const Rgba*>(
               &_Rgba_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Rgba& a, Rgba& b) {
    a.Swap(&b);
  }
  inline void Swap(Rgba* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Rgba* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Rgba* New() const final {
    return CreateMaybeMessage<Rgba>(nullptr);
  }

  Rgba* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Rgba>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Rgba& from);
  void MergeFrom(const Rgba& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rgba* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Rgba";
  }
  protected:
  explicit Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kOpacityFieldNumber = 4,
    kBlueFieldNumber = 3,
  };
  // uint32 red = 1;
  void clear_red();
  ::PROTOBUF_NAMESPACE_ID::uint32 red() const;
  void set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_red() const;
  void _internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 green = 2;
  void clear_green();
  ::PROTOBUF_NAMESPACE_ID::uint32 green() const;
  void set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_green() const;
  void _internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double opacity = 4;
  void clear_opacity();
  double opacity() const;
  void set_opacity(double value);
  private:
  double _internal_opacity() const;
  void _internal_set_opacity(double value);
  public:

  // uint32 blue = 3;
  void clear_blue();
  ::PROTOBUF_NAMESPACE_ID::uint32 blue() const;
  void set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_blue() const;
  void _internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Rgba)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 red_;
  ::PROTOBUF_NAMESPACE_ID::uint32 green_;
  double opacity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 blue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Color PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Color) */ {
 public:
  inline Color() : Color(nullptr) {}
  virtual ~Color();
  explicit constexpr Color(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Color(const Color& from);
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  inline Color& operator=(Color&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Color& default_instance() {
    return *internal_default_instance();
  }
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }
  inline void Swap(Color* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Color* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(nullptr);
  }

  Color* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Color";
  }
  protected:
  explicit Color(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kRgbaFieldNumber = 3,
    kIsRgbaFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .transport_catalogue_serialize.Rgba rgba = 3;
  bool has_rgba() const;
  private:
  bool _internal_has_rgba() const;
  public:
  void clear_rgba();
  const ::transport_catalogue_serialize::Rgba& rgba() const;
  ::transport_catalogue_serialize::Rgba* release_rgba();
  ::transport_catalogue_serialize::Rgba* mutable_rgba();
  void set_allocated_rgba(::transport_catalogue_serialize::Rgba* rgba);
  private:
  const ::transport_catalogue_serialize::Rgba& _internal_rgba() const;
  ::transport_catalogue_serialize::Rgba* _internal_mutable_rgba();
  public:
  void unsafe_arena_set_allocated_rgba(
      ::transport_catalogue_serialize::Rgba* rgba);
  ::transport_catalogue_serialize::Rgba* unsafe_arena_release_rgba();

  // bool is_rgba = 1;
  void clear_is_rgba();
  bool is_rgba() const;
  void set_is_rgba(bool value);
  private:
  bool _internal_is_rgba() const;
  void _internal_set_is_rgba(bool value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Color)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::transport_catalogue_serialize::Rgba* rgba_;
  bool is_rgba_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RenderSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.RenderSettings) */ {
 public:
  inline RenderSettings() : RenderSettings(nullptr) {}
  virtual ~RenderSettings();
  explicit constexpr RenderSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderSettings(const RenderSettings& from);
  RenderSettings(RenderSettings&& from) noexcept
    : RenderSettings() {
    *this = ::std::move(from);
  }

  inline RenderSettings& operator=(const RenderSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderSettings& operator=(RenderSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RenderSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderSettings* internal_default_instance() {
    return reinterpret_cast<const RenderSettings*>(
               &_RenderSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RenderSettings& a, RenderSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RenderSettings* New() const final {
    return CreateMaybeMessage<RenderSettings>(nullptr);
  }

  RenderSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RenderSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RenderSettings& from);
  void MergeFrom(const RenderSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.RenderSettings";
  }
  protected:
  explicit RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColorPaletteFieldNumber = 12,
    kBusLabelOffsetFieldNumber = 7,
    kStopLabelOffsetFieldNumber = 9,
    kUnderlayerColorFieldNumber = 10,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
    kPaddingFieldNumber = 3,
    kLineWidthFieldNumber = 4,
    kStopRadiusFieldNumber = 5,
    kBusLabelFontSizeFieldNumber = 6,
    kStopLabelFontSizeFieldNumber = 8,
    kUnderlayerWidthFieldNumber = 11,
  };
  // repeated .transport_catalogue_serialize.Color color_palette = 12;
  int color_palette_size() const;
  private:
  int _internal_color_palette_size() const;
  public:
  void clear_color_palette();
  ::transport_catalogue_serialize::Color* mutable_color_palette(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >*
      mutable_color_palette();
  private:
  const ::transport_catalogue_serialize::Color& _internal_color_palette(int index) const;
  ::transport_catalogue_serialize::Color* _internal_add_color_palette();
  public:
  const ::transport_catalogue_serialize::Color& color_palette(int index) const;
  ::transport_catalogue_serialize::Color* add_color_palette();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >&
      color_palette() const;

  // .transport_catalogue_serialize.Point bus_label_offset = 7;
  bool has_bus_label_offset() const;
  private:
  bool _internal_has_bus_label_offset() const;
  public:
  void clear_bus_label_offset();
  const ::transport_catalogue_serialize::Point& bus_label_offset() const;
  ::transport_catalogue_serialize::Point* release_bus_label_offset();
  ::transport_catalogue_serialize::Point* mutable_bus_label_offset();
  void set_allocated_bus_label_offset(::transport_catalogue_serialize::Point* bus_label_offset);
  private:
  const ::transport_catalogue_serialize::Point& _internal_bus_label_offset() const;
  ::transport_catalogue_serialize::Point* _internal_mutable_bus_label_offset();
  public:
  void unsafe_arena_set_allocated_bus_label_offset(
      ::transport_catalogue_serialize::Point* bus_label_offset);
  ::transport_catalogue_serialize::Point* unsafe_arena_release_bus_label_offset();

  // .transport_catalogue_serialize.Point stop_label_offset = 9;
  bool has_stop_label_offset() const;
  private:
  bool _internal_has_stop_label_offset() const;
  public:
  void clear_stop_label_offset();
  const ::transport_catalogue_serialize::Point& stop_label_offset() const;
  ::transport_catalogue_serialize::Point* release_stop_label_offset();
  ::transport_catalogue_serialize::Point* mutable_stop_label_offset();
  void set_allocated_stop_label_offset(::transport_catalogue_serialize::Point* stop_label_offset);
  private:
  const ::transport_catalogue_serialize::Point& _internal_stop_label_offset() const;
  ::transport_catalogue_serialize::Point* _internal_mutable_stop_label_offset();
  public:
  void unsafe_arena_set_allocated_stop_label_offset(
      ::transport_catalogue_serialize::Point* stop_label_offset);
  ::transport_catalogue_serialize::Point* unsafe_arena_release_stop_label_offset();

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  bool has_underlayer_color() const;
  private:
  bool _internal_has_underlayer_color() const;
  public:
  void clear_underlayer_color();
  const ::transport_catalogue_serialize::Color& underlayer_color() const;
  ::transport_catalogue_serialize::Color* release_underlayer_color();
  ::transport_catalogue_serialize::Color* mutable_underlayer_color();
  void set_allocated_underlayer_color(::transport_catalogue_serialize::Color* underlayer_color);
  private:
  const ::transport_catalogue_serialize::Color& _internal_underlayer_color() const;
  ::transport_catalogue_serialize::Color* _internal_mutable_underlayer_color();
  public:
  void unsafe_arena_set_allocated_underlayer_color(
      ::transport_catalogue_serialize::Color* underlayer_color);
  ::transport_catalogue_serialize::Color* unsafe_arena_release_underlayer_color();

  // double width = 1;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 2;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double padding = 3;
  void clear_padding();
  double padding() const;
  void set_padding(double value);
  private:
  double _internal_padding() const;
  void _internal_set_padding(double value);
  public:

  // double line_width = 4;
  void clear_line_width();
  double line_width() const;
  void set_line_width(double value);
  private:
  double _internal_line_width() const;
  void _internal_set_line_width(double value);
  public:

  // double stop_radius = 5;
  void clear_stop_radius();
  double stop_radius() const;
  void set_stop_radius(double value);
  private:
  double _internal_stop_radius() const;
  void _internal_set_stop_radius(double value);
  public:

  // uint32 bus_label_font_size = 6;
  void clear_bus_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_label_font_size() const;
  void set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_bus_label_font_size() const;
  void _internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stop_label_font_size = 8;
  void clear_stop_label_font_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_label_font_size() const;
  void set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_label_font_size() const;
  void _internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double underlayer_width = 11;
  void clear_underlayer_width();
  double underlayer_width() const;
  void set_underlayer_width(double value);
  private:
  double _internal_underlayer_width() const;
  void _internal_set_underlayer_width(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.RenderSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color > color_palette_;
  ::transport_catalogue_serialize::Point* bus_label_offset_;
  ::transport_catalogue_serialize::Point* stop_label_offset_;
  ::transport_catalogue_serialize::Color* underlayer_color_;
  double width_;
  double height_;
  double padding_;
  double line_width_;
  double stop_radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bus_label_font_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_label_font_size_;
  double underlayer_width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class StopsToVertex PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.StopsToVertex) */ {
 public:
  inline StopsToVertex() : StopsToVertex(nullptr) {}
  virtual ~StopsToVertex();
  explicit constexpr StopsToVertex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopsToVertex(const StopsToVertex& from);
  StopsToVertex(StopsToVertex&& from) noexcept
    : StopsToVertex() {
    *this = ::std::move(from);
  }

  inline StopsToVertex& operator=(const StopsToVertex& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopsToVertex& operator=(StopsToVertex&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopsToVertex& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopsToVertex* internal_default_instance() {
    return reinterpret_cast<const StopsToVertex*>(
               &_StopsToVertex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StopsToVertex& a, StopsToVertex& b) {
    a.Swap(&b);
  }
  inline void Swap(StopsToVertex* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopsToVertex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopsToVertex* New() const final {
    return CreateMaybeMessage<StopsToVertex>(nullptr);
  }

  StopsToVertex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopsToVertex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopsToVertex& from);
  void MergeFrom(const StopsToVertex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopsToVertex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.StopsToVertex";
  }
  protected:
  explicit StopsToVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopNameFieldNumber = 1,
    kStopInIdFieldNumber = 2,
    kStopOutIdFieldNumber = 3,
  };
  // bytes stop_name = 1;
  void clear_stop_name();
  const std::string& stop_name() const;
  void set_stop_name(const std::string& value);
  void set_stop_name(std::string&& value);
  void set_stop_name(const char* value);
  void set_stop_name(const void* value, size_t size);
  std::string* mutable_stop_name();
  std::string* release_stop_name();
  void set_allocated_stop_name(std::string* stop_name);
  private:
  const std::string& _internal_stop_name() const;
  void _internal_set_stop_name(const std::string& value);
  std::string* _internal_mutable_stop_name();
  public:

  // uint32 stop_in_id = 2;
  void clear_stop_in_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_in_id() const;
  void set_stop_in_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_in_id() const;
  void _internal_set_stop_in_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 stop_out_id = 3;
  void clear_stop_out_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_out_id() const;
  void set_stop_out_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_stop_out_id() const;
  void _internal_set_stop_out_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.StopsToVertex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stop_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_in_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 stop_out_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class RoutingSettings PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.RoutingSettings) */ {
 public:
  inline RoutingSettings() : RoutingSettings(nullptr) {}
  virtual ~RoutingSettings();
  explicit constexpr RoutingSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RoutingSettings(const RoutingSettings& from);
  RoutingSettings(RoutingSettings&& from) noexcept
    : RoutingSettings() {
    *this = ::std::move(from);
  }

  inline RoutingSettings& operator=(const RoutingSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoutingSettings& operator=(RoutingSettings&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoutingSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const RoutingSettings* internal_default_instance() {
    return reinterpret_cast<const RoutingSettings*>(
               &_RoutingSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RoutingSettings& a, RoutingSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(RoutingSettings* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoutingSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoutingSettings* New() const final {
    return CreateMaybeMessage<RoutingSettings>(nullptr);
  }

  RoutingSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoutingSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoutingSettings& from);
  void MergeFrom(const RoutingSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoutingSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.RoutingSettings";
  }
  protected:
  explicit RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityFieldNumber = 2,
    kWaitTimeFieldNumber = 1,
  };
  // double velocity = 2;
  void clear_velocity();
  double velocity() const;
  void set_velocity(double value);
  private:
  double _internal_velocity() const;
  void _internal_set_velocity(double value);
  public:

  // int32 wait_time = 1;
  void clear_wait_time();
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time() const;
  void set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait_time() const;
  void _internal_set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.RoutingSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double velocity_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class EdgesInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.EdgesInfo) */ {
 public:
  inline EdgesInfo() : EdgesInfo(nullptr) {}
  virtual ~EdgesInfo();
  explicit constexpr EdgesInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EdgesInfo(const EdgesInfo& from);
  EdgesInfo(EdgesInfo&& from) noexcept
    : EdgesInfo() {
    *this = ::std::move(from);
  }

  inline EdgesInfo& operator=(const EdgesInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline EdgesInfo& operator=(EdgesInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EdgesInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const EdgesInfo* internal_default_instance() {
    return reinterpret_cast<const EdgesInfo*>(
               &_EdgesInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EdgesInfo& a, EdgesInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(EdgesInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EdgesInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EdgesInfo* New() const final {
    return CreateMaybeMessage<EdgesInfo>(nullptr);
  }

  EdgesInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EdgesInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EdgesInfo& from);
  void MergeFrom(const EdgesInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgesInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.EdgesInfo";
  }
  protected:
  explicit EdgesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kEdgeIdFieldNumber = 1,
    kItemTypeFieldNumber = 4,
    kTotalTimeFieldNumber = 3,
    kSpanCountFieldNumber = 5,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint32 edge_id = 1;
  void clear_edge_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_id() const;
  void set_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_edge_id() const;
  void _internal_set_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool item_type = 4;
  void clear_item_type();
  bool item_type() const;
  void set_item_type(bool value);
  private:
  bool _internal_item_type() const;
  void _internal_set_item_type(bool value);
  public:

  // double total_time = 3;
  void clear_total_time();
  double total_time() const;
  void set_total_time(double value);
  private:
  double _internal_total_time() const;
  void _internal_set_total_time(double value);
  public:

  // int32 span_count = 5;
  void clear_span_count();
  ::PROTOBUF_NAMESPACE_ID::int32 span_count() const;
  void set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_span_count() const;
  void _internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.EdgesInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 edge_id_;
  bool item_type_;
  double total_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 span_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Edge PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Edge) */ {
 public:
  inline Edge() : Edge(nullptr) {}
  virtual ~Edge();
  explicit constexpr Edge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Edge(const Edge& from);
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Edge& default_instance() {
    return *internal_default_instance();
  }
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }
  inline void Swap(Edge* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Edge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Edge";
  }
  protected:
  explicit Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromFieldNumber = 1,
    kToFieldNumber = 2,
    kWeightFieldNumber = 3,
  };
  // uint32 from = 1;
  void clear_from();
  ::PROTOBUF_NAMESPACE_ID::uint32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from() const;
  void _internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to = 2;
  void clear_to();
  ::PROTOBUF_NAMESPACE_ID::uint32 to() const;
  void set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to() const;
  void _internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // double weight = 3;
  void clear_weight();
  double weight() const;
  void set_weight(double value);
  private:
  double _internal_weight() const;
  void _internal_set_weight(double value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Edge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_;
  double weight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Graph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Graph) */ {
 public:
  inline Graph() : Graph(nullptr) {}
  virtual ~Graph();
  explicit constexpr Graph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Graph(const Graph& from);
  Graph(Graph&& from) noexcept
    : Graph() {
    *this = ::std::move(from);
  }

  inline Graph& operator=(const Graph& from) {
    CopyFrom(from);
    return *this;
  }
  inline Graph& operator=(Graph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Graph& default_instance() {
    return *internal_default_instance();
  }
  static inline const Graph* internal_default_instance() {
    return reinterpret_cast<const Graph*>(
               &_Graph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Graph& a, Graph& b) {
    a.Swap(&b);
  }
  inline void Swap(Graph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Graph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Graph* New() const final {
    return CreateMaybeMessage<Graph>(nullptr);
  }

  Graph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Graph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Graph& from);
  void MergeFrom(const Graph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Graph";
  }
  protected:
  explicit Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEdgeFieldNumber = 2,
    kVertexCountFieldNumber = 1,
  };
  // repeated .transport_catalogue_serialize.Edge edge = 2;
  int edge_size() const;
  private:
  int _internal_edge_size() const;
  public:
  void clear_edge();
  ::transport_catalogue_serialize::Edge* mutable_edge(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Edge >*
      mutable_edge();
  private:
  const ::transport_catalogue_serialize::Edge& _internal_edge(int index) const;
  ::transport_catalogue_serialize::Edge* _internal_add_edge();
  public:
  const ::transport_catalogue_serialize::Edge& edge(int index) const;
  ::transport_catalogue_serialize::Edge* add_edge();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Edge >&
      edge() const;

  // uint32 vertex_count = 1;
  void clear_vertex_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 vertex_count() const;
  void set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_vertex_count() const;
  void _internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Graph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Edge > edge_;
  ::PROTOBUF_NAMESPACE_ID::uint32 vertex_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class Router PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.Router) */ {
 public:
  inline Router() : Router(nullptr) {}
  virtual ~Router();
  explicit constexpr Router(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Router(const Router& from);
  Router(Router&& from) noexcept
    : Router() {
    *this = ::std::move(from);
  }

  inline Router& operator=(const Router& from) {
    CopyFrom(from);
    return *this;
  }
  inline Router& operator=(Router&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Router& default_instance() {
    return *internal_default_instance();
  }
  static inline const Router* internal_default_instance() {
    return reinterpret_cast<const Router*>(
               &_Router_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Router& a, Router& b) {
    a.Swap(&b);
  }
  inline void Swap(Router* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Router* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Router* New() const final {
    return CreateMaybeMessage<Router>(nullptr);
  }

  Router* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Router>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Router& from);
  void MergeFrom(const Router& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Router* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.Router";
  }
  protected:
  explicit Router(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsToVertexFieldNumber = 2,
    kEdgesInfoFieldNumber = 3,
    kRoutingSettingsFieldNumber = 1,
    kGraphFieldNumber = 4,
  };
  // repeated .transport_catalogue_serialize.StopsToVertex stops_to_vertex = 2;
  int stops_to_vertex_size() const;
  private:
  int _internal_stops_to_vertex_size() const;
  public:
  void clear_stops_to_vertex();
  ::transport_catalogue_serialize::StopsToVertex* mutable_stops_to_vertex(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::StopsToVertex >*
      mutable_stops_to_vertex();
  private:
  const ::transport_catalogue_serialize::StopsToVertex& _internal_stops_to_vertex(int index) const;
  ::transport_catalogue_serialize::StopsToVertex* _internal_add_stops_to_vertex();
  public:
  const ::transport_catalogue_serialize::StopsToVertex& stops_to_vertex(int index) const;
  ::transport_catalogue_serialize::StopsToVertex* add_stops_to_vertex();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::StopsToVertex >&
      stops_to_vertex() const;

  // repeated .transport_catalogue_serialize.EdgesInfo edges_info = 3;
  int edges_info_size() const;
  private:
  int _internal_edges_info_size() const;
  public:
  void clear_edges_info();
  ::transport_catalogue_serialize::EdgesInfo* mutable_edges_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::EdgesInfo >*
      mutable_edges_info();
  private:
  const ::transport_catalogue_serialize::EdgesInfo& _internal_edges_info(int index) const;
  ::transport_catalogue_serialize::EdgesInfo* _internal_add_edges_info();
  public:
  const ::transport_catalogue_serialize::EdgesInfo& edges_info(int index) const;
  ::transport_catalogue_serialize::EdgesInfo* add_edges_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::EdgesInfo >&
      edges_info() const;

  // .transport_catalogue_serialize.RoutingSettings routing_settings = 1;
  bool has_routing_settings() const;
  private:
  bool _internal_has_routing_settings() const;
  public:
  void clear_routing_settings();
  const ::transport_catalogue_serialize::RoutingSettings& routing_settings() const;
  ::transport_catalogue_serialize::RoutingSettings* release_routing_settings();
  ::transport_catalogue_serialize::RoutingSettings* mutable_routing_settings();
  void set_allocated_routing_settings(::transport_catalogue_serialize::RoutingSettings* routing_settings);
  private:
  const ::transport_catalogue_serialize::RoutingSettings& _internal_routing_settings() const;
  ::transport_catalogue_serialize::RoutingSettings* _internal_mutable_routing_settings();
  public:
  void unsafe_arena_set_allocated_routing_settings(
      ::transport_catalogue_serialize::RoutingSettings* routing_settings);
  ::transport_catalogue_serialize::RoutingSettings* unsafe_arena_release_routing_settings();

  // .transport_catalogue_serialize.Graph graph = 4;
  bool has_graph() const;
  private:
  bool _internal_has_graph() const;
  public:
  void clear_graph();
  const ::transport_catalogue_serialize::Graph& graph() const;
  ::transport_catalogue_serialize::Graph* release_graph();
  ::transport_catalogue_serialize::Graph* mutable_graph();
  void set_allocated_graph(::transport_catalogue_serialize::Graph* graph);
  private:
  const ::transport_catalogue_serialize::Graph& _internal_graph() const;
  ::transport_catalogue_serialize::Graph* _internal_mutable_graph();
  public:
  void unsafe_arena_set_allocated_graph(
      ::transport_catalogue_serialize::Graph* graph);
  ::transport_catalogue_serialize::Graph* unsafe_arena_release_graph();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.Router)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::StopsToVertex > stops_to_vertex_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::EdgesInfo > edges_info_;
  ::transport_catalogue_serialize::RoutingSettings* routing_settings_;
  ::transport_catalogue_serialize::Graph* graph_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// -------------------------------------------------------------------

class TransportCatalogue PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:transport_catalogue_serialize.TransportCatalogue) */ {
 public:
  inline TransportCatalogue() : TransportCatalogue(nullptr) {}
  virtual ~TransportCatalogue();
  explicit constexpr TransportCatalogue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransportCatalogue(const TransportCatalogue& from);
  TransportCatalogue(TransportCatalogue&& from) noexcept
    : TransportCatalogue() {
    *this = ::std::move(from);
  }

  inline TransportCatalogue& operator=(const TransportCatalogue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransportCatalogue& operator=(TransportCatalogue&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransportCatalogue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TransportCatalogue* internal_default_instance() {
    return reinterpret_cast<const TransportCatalogue*>(
               &_TransportCatalogue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TransportCatalogue& a, TransportCatalogue& b) {
    a.Swap(&b);
  }
  inline void Swap(TransportCatalogue* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransportCatalogue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransportCatalogue* New() const final {
    return CreateMaybeMessage<TransportCatalogue>(nullptr);
  }

  TransportCatalogue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransportCatalogue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransportCatalogue& from);
  void MergeFrom(const TransportCatalogue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransportCatalogue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "transport_catalogue_serialize.TransportCatalogue";
  }
  protected:
  explicit TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStopsFieldNumber = 1,
    kBusesFieldNumber = 2,
    kDistancesFieldNumber = 3,
    kRenderSettingsFieldNumber = 4,
    kRouterFieldNumber = 5,
  };
  // repeated .transport_catalogue_serialize.Stop stops = 1;
  int stops_size() const;
  private:
  int _internal_stops_size() const;
  public:
  void clear_stops();
  ::transport_catalogue_serialize::Stop* mutable_stops(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
      mutable_stops();
  private:
  const ::transport_catalogue_serialize::Stop& _internal_stops(int index) const;
  ::transport_catalogue_serialize::Stop* _internal_add_stops();
  public:
  const ::transport_catalogue_serialize::Stop& stops(int index) const;
  ::transport_catalogue_serialize::Stop* add_stops();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
      stops() const;

  // repeated .transport_catalogue_serialize.Bus buses = 2;
  int buses_size() const;
  private:
  int _internal_buses_size() const;
  public:
  void clear_buses();
  ::transport_catalogue_serialize::Bus* mutable_buses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
      mutable_buses();
  private:
  const ::transport_catalogue_serialize::Bus& _internal_buses(int index) const;
  ::transport_catalogue_serialize::Bus* _internal_add_buses();
  public:
  const ::transport_catalogue_serialize::Bus& buses(int index) const;
  ::transport_catalogue_serialize::Bus* add_buses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
      buses() const;

  // repeated .transport_catalogue_serialize.Distance distances = 3;
  int distances_size() const;
  private:
  int _internal_distances_size() const;
  public:
  void clear_distances();
  ::transport_catalogue_serialize::Distance* mutable_distances(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >*
      mutable_distances();
  private:
  const ::transport_catalogue_serialize::Distance& _internal_distances(int index) const;
  ::transport_catalogue_serialize::Distance* _internal_add_distances();
  public:
  const ::transport_catalogue_serialize::Distance& distances(int index) const;
  ::transport_catalogue_serialize::Distance* add_distances();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >&
      distances() const;

  // .transport_catalogue_serialize.RenderSettings render_settings = 4;
  bool has_render_settings() const;
  private:
  bool _internal_has_render_settings() const;
  public:
  void clear_render_settings();
  const ::transport_catalogue_serialize::RenderSettings& render_settings() const;
  ::transport_catalogue_serialize::RenderSettings* release_render_settings();
  ::transport_catalogue_serialize::RenderSettings* mutable_render_settings();
  void set_allocated_render_settings(::transport_catalogue_serialize::RenderSettings* render_settings);
  private:
  const ::transport_catalogue_serialize::RenderSettings& _internal_render_settings() const;
  ::transport_catalogue_serialize::RenderSettings* _internal_mutable_render_settings();
  public:
  void unsafe_arena_set_allocated_render_settings(
      ::transport_catalogue_serialize::RenderSettings* render_settings);
  ::transport_catalogue_serialize::RenderSettings* unsafe_arena_release_render_settings();

  // .transport_catalogue_serialize.Router router = 5;
  bool has_router() const;
  private:
  bool _internal_has_router() const;
  public:
  void clear_router();
  const ::transport_catalogue_serialize::Router& router() const;
  ::transport_catalogue_serialize::Router* release_router();
  ::transport_catalogue_serialize::Router* mutable_router();
  void set_allocated_router(::transport_catalogue_serialize::Router* router);
  private:
  const ::transport_catalogue_serialize::Router& _internal_router() const;
  ::transport_catalogue_serialize::Router* _internal_mutable_router();
  public:
  void unsafe_arena_set_allocated_router(
      ::transport_catalogue_serialize::Router* router);
  ::transport_catalogue_serialize::Router* unsafe_arena_release_router();

  // @@protoc_insertion_point(class_scope:transport_catalogue_serialize.TransportCatalogue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop > stops_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus > buses_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance > distances_;
  ::transport_catalogue_serialize::RenderSettings* render_settings_;
  ::transport_catalogue_serialize::Router* router_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transport_5fcatalogue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Coordinates

// double lat = 1;
inline void Coordinates::clear_lat() {
  lat_ = 0;
}
inline double Coordinates::_internal_lat() const {
  return lat_;
}
inline double Coordinates::lat() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Coordinates.lat)
  return _internal_lat();
}
inline void Coordinates::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Coordinates::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Coordinates.lat)
}

// double lng = 2;
inline void Coordinates::clear_lng() {
  lng_ = 0;
}
inline double Coordinates::_internal_lng() const {
  return lng_;
}
inline double Coordinates::lng() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Coordinates.lng)
  return _internal_lng();
}
inline void Coordinates::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Coordinates::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Coordinates.lng)
}

// -------------------------------------------------------------------

// Stop

// bytes name = 1;
inline void Stop::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Stop::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.name)
  return _internal_name();
}
inline void Stop::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Stop.name)
}
inline std::string* Stop::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stop.name)
  return _internal_mutable_name();
}
inline const std::string& Stop::_internal_name() const {
  return name_.Get();
}
inline void Stop::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stop::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.Stop.name)
}
inline void Stop::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Stop.name)
}
inline void Stop::set_name(const void* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Stop.name)
}
inline std::string* Stop::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stop::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Stop.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stop::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Stop.name)
}

// .transport_catalogue_serialize.Coordinates coordinates = 2;
inline bool Stop::_internal_has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != nullptr;
}
inline bool Stop::has_coordinates() const {
  return _internal_has_coordinates();
}
inline void Stop::clear_coordinates() {
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
}
inline const ::transport_catalogue_serialize::Coordinates& Stop::_internal_coordinates() const {
  const ::transport_catalogue_serialize::Coordinates* p = coordinates_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Coordinates&>(
      ::transport_catalogue_serialize::_Coordinates_default_instance_);
}
inline const ::transport_catalogue_serialize::Coordinates& Stop::coordinates() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Stop.coordinates)
  return _internal_coordinates();
}
inline void Stop::unsafe_arena_set_allocated_coordinates(
    ::transport_catalogue_serialize::Coordinates* coordinates) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(coordinates_);
  }
  coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Stop.coordinates)
}
inline ::transport_catalogue_serialize::Coordinates* Stop::release_coordinates() {
  
  ::transport_catalogue_serialize::Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::unsafe_arena_release_coordinates() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Stop.coordinates)
  
  ::transport_catalogue_serialize::Coordinates* temp = coordinates_;
  coordinates_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::_internal_mutable_coordinates() {
  
  if (coordinates_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Coordinates>(GetArena());
    coordinates_ = p;
  }
  return coordinates_;
}
inline ::transport_catalogue_serialize::Coordinates* Stop::mutable_coordinates() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Stop.coordinates)
  return _internal_mutable_coordinates();
}
inline void Stop::set_allocated_coordinates(::transport_catalogue_serialize::Coordinates* coordinates) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete coordinates_;
  }
  if (coordinates) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(coordinates);
    if (message_arena != submessage_arena) {
      coordinates = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, coordinates, submessage_arena);
    }
    
  } else {
    
  }
  coordinates_ = coordinates;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Stop.coordinates)
}

// -------------------------------------------------------------------

// Bus

// uint32 unique_stops = 1;
inline void Bus::clear_unique_stops() {
  unique_stops_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::_internal_unique_stops() const {
  return unique_stops_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::unique_stops() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.unique_stops)
  return _internal_unique_stops();
}
inline void Bus::_internal_set_unique_stops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  unique_stops_ = value;
}
inline void Bus::set_unique_stops(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_unique_stops(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.unique_stops)
}

// uint32 stops_number = 2;
inline void Bus::clear_stops_number() {
  stops_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::_internal_stops_number() const {
  return stops_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bus::stops_number() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.stops_number)
  return _internal_stops_number();
}
inline void Bus::_internal_set_stops_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stops_number_ = value;
}
inline void Bus::set_stops_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stops_number(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.stops_number)
}

// bytes number = 3;
inline void Bus::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Bus::number() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.number)
  return _internal_number();
}
inline void Bus::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.number)
}
inline std::string* Bus::mutable_number() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.number)
  return _internal_mutable_number();
}
inline const std::string& Bus::_internal_number() const {
  return number_.Get();
}
inline void Bus::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Bus::set_number(std::string&& value) {
  
  number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.Bus.number)
}
inline void Bus::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Bus.number)
}
inline void Bus::set_number(const void* value,
    size_t size) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Bus.number)
}
inline std::string* Bus::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Bus::release_number() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Bus.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Bus::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Bus.number)
}

// repeated bytes raw_route = 4;
inline int Bus::_internal_raw_route_size() const {
  return raw_route_.size();
}
inline int Bus::raw_route_size() const {
  return _internal_raw_route_size();
}
inline void Bus::clear_raw_route() {
  raw_route_.Clear();
}
inline std::string* Bus::add_raw_route() {
  // @@protoc_insertion_point(field_add_mutable:transport_catalogue_serialize.Bus.raw_route)
  return _internal_add_raw_route();
}
inline const std::string& Bus::_internal_raw_route(int index) const {
  return raw_route_.Get(index);
}
inline const std::string& Bus::raw_route(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.raw_route)
  return _internal_raw_route(index);
}
inline std::string* Bus::mutable_raw_route(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.raw_route)
  return raw_route_.Mutable(index);
}
inline void Bus::set_raw_route(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.raw_route)
  raw_route_.Mutable(index)->assign(value);
}
inline void Bus::set_raw_route(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.raw_route)
  raw_route_.Mutable(index)->assign(std::move(value));
}
inline void Bus::set_raw_route(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_route_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Bus.raw_route)
}
inline void Bus::set_raw_route(int index, const void* value, size_t size) {
  raw_route_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Bus.raw_route)
}
inline std::string* Bus::_internal_add_raw_route() {
  return raw_route_.Add();
}
inline void Bus::add_raw_route(const std::string& value) {
  raw_route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Bus.raw_route)
}
inline void Bus::add_raw_route(std::string&& value) {
  raw_route_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Bus.raw_route)
}
inline void Bus::add_raw_route(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  raw_route_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:transport_catalogue_serialize.Bus.raw_route)
}
inline void Bus::add_raw_route(const void* value, size_t size) {
  raw_route_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:transport_catalogue_serialize.Bus.raw_route)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Bus::raw_route() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Bus.raw_route)
  return raw_route_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Bus::mutable_raw_route() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Bus.raw_route)
  return &raw_route_;
}

// repeated .transport_catalogue_serialize.Stop route = 5;
inline int Bus::_internal_route_size() const {
  return route_.size();
}
inline int Bus::route_size() const {
  return _internal_route_size();
}
inline void Bus::clear_route() {
  route_.Clear();
}
inline ::transport_catalogue_serialize::Stop* Bus::mutable_route(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Bus.route)
  return route_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
Bus::mutable_route() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Bus.route)
  return &route_;
}
inline const ::transport_catalogue_serialize::Stop& Bus::_internal_route(int index) const {
  return route_.Get(index);
}
inline const ::transport_catalogue_serialize::Stop& Bus::route(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.route)
  return _internal_route(index);
}
inline ::transport_catalogue_serialize::Stop* Bus::_internal_add_route() {
  return route_.Add();
}
inline ::transport_catalogue_serialize::Stop* Bus::add_route() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Bus.route)
  return _internal_add_route();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
Bus::route() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Bus.route)
  return route_;
}

// bool is_round_trip = 6;
inline void Bus::clear_is_round_trip() {
  is_round_trip_ = false;
}
inline bool Bus::_internal_is_round_trip() const {
  return is_round_trip_;
}
inline bool Bus::is_round_trip() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.is_round_trip)
  return _internal_is_round_trip();
}
inline void Bus::_internal_set_is_round_trip(bool value) {
  
  is_round_trip_ = value;
}
inline void Bus::set_is_round_trip(bool value) {
  _internal_set_is_round_trip(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.is_round_trip)
}

// double distance = 7;
inline void Bus::clear_distance() {
  distance_ = 0;
}
inline double Bus::_internal_distance() const {
  return distance_;
}
inline double Bus::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Bus.distance)
  return _internal_distance();
}
inline void Bus::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Bus::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Bus.distance)
}

// -------------------------------------------------------------------

// Distance

// bytes from = 1;
inline void Distance::clear_from() {
  from_.ClearToEmpty();
}
inline const std::string& Distance::from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.from)
  return _internal_from();
}
inline void Distance::set_from(const std::string& value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.from)
}
inline std::string* Distance::mutable_from() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Distance.from)
  return _internal_mutable_from();
}
inline const std::string& Distance::_internal_from() const {
  return from_.Get();
}
inline void Distance::_internal_set_from(const std::string& value) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Distance::set_from(std::string&& value) {
  
  from_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.Distance.from)
}
inline void Distance::set_from(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Distance.from)
}
inline void Distance::set_from(const void* value,
    size_t size) {
  
  from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Distance.from)
}
inline std::string* Distance::_internal_mutable_from() {
  
  return from_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Distance::release_from() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Distance.from)
  return from_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distance::set_allocated_from(std::string* from) {
  if (from != nullptr) {
    
  } else {
    
  }
  from_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Distance.from)
}

// bytes to = 2;
inline void Distance::clear_to() {
  to_.ClearToEmpty();
}
inline const std::string& Distance::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.to)
  return _internal_to();
}
inline void Distance::set_to(const std::string& value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.to)
}
inline std::string* Distance::mutable_to() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Distance.to)
  return _internal_mutable_to();
}
inline const std::string& Distance::_internal_to() const {
  return to_.Get();
}
inline void Distance::_internal_set_to(const std::string& value) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Distance::set_to(std::string&& value) {
  
  to_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.Distance.to)
}
inline void Distance::set_to(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Distance.to)
}
inline void Distance::set_to(const void* value,
    size_t size) {
  
  to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Distance.to)
}
inline std::string* Distance::_internal_mutable_to() {
  
  return to_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Distance::release_to() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Distance.to)
  return to_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Distance::set_allocated_to(std::string* to) {
  if (to != nullptr) {
    
  } else {
    
  }
  to_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), to,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Distance.to)
}

// double distance = 3;
inline void Distance::clear_distance() {
  distance_ = 0;
}
inline double Distance::_internal_distance() const {
  return distance_;
}
inline double Distance::distance() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Distance.distance)
  return _internal_distance();
}
inline void Distance::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Distance::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Distance.distance)
}

// -------------------------------------------------------------------

// Point

// double x = 1;
inline void Point::clear_x() {
  x_ = 0;
}
inline double Point::_internal_x() const {
  return x_;
}
inline double Point::x() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Point.x)
  return _internal_x();
}
inline void Point::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Point::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Point.x)
}

// double y = 2;
inline void Point::clear_y() {
  y_ = 0;
}
inline double Point::_internal_y() const {
  return y_;
}
inline double Point::y() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Point.y)
  return _internal_y();
}
inline void Point::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Point::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Point.y)
}

// -------------------------------------------------------------------

// Rgba

// uint32 red = 1;
inline void Rgba::clear_red() {
  red_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_red() const {
  return red_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::red() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.red)
  return _internal_red();
}
inline void Rgba::_internal_set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  red_ = value;
}
inline void Rgba::set_red(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.red)
}

// uint32 green = 2;
inline void Rgba::clear_green() {
  green_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_green() const {
  return green_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::green() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.green)
  return _internal_green();
}
inline void Rgba::_internal_set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  green_ = value;
}
inline void Rgba::set_green(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.green)
}

// uint32 blue = 3;
inline void Rgba::clear_blue() {
  blue_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::_internal_blue() const {
  return blue_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Rgba::blue() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.blue)
  return _internal_blue();
}
inline void Rgba::_internal_set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  blue_ = value;
}
inline void Rgba::set_blue(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.blue)
}

// double opacity = 4;
inline void Rgba::clear_opacity() {
  opacity_ = 0;
}
inline double Rgba::_internal_opacity() const {
  return opacity_;
}
inline double Rgba::opacity() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Rgba.opacity)
  return _internal_opacity();
}
inline void Rgba::_internal_set_opacity(double value) {
  
  opacity_ = value;
}
inline void Rgba::set_opacity(double value) {
  _internal_set_opacity(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Rgba.opacity)
}

// -------------------------------------------------------------------

// Color

// bool is_rgba = 1;
inline void Color::clear_is_rgba() {
  is_rgba_ = false;
}
inline bool Color::_internal_is_rgba() const {
  return is_rgba_;
}
inline bool Color::is_rgba() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.is_rgba)
  return _internal_is_rgba();
}
inline void Color::_internal_set_is_rgba(bool value) {
  
  is_rgba_ = value;
}
inline void Color::set_is_rgba(bool value) {
  _internal_set_is_rgba(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Color.is_rgba)
}

// string name = 2;
inline void Color::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Color::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.name)
  return _internal_name();
}
inline void Color::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Color.name)
}
inline std::string* Color::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Color.name)
  return _internal_mutable_name();
}
inline const std::string& Color::_internal_name() const {
  return name_.Get();
}
inline void Color::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Color::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.Color.name)
}
inline void Color::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.Color.name)
}
inline void Color::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.Color.name)
}
inline std::string* Color::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Color::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Color.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Color::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Color.name)
}

// .transport_catalogue_serialize.Rgba rgba = 3;
inline bool Color::_internal_has_rgba() const {
  return this != internal_default_instance() && rgba_ != nullptr;
}
inline bool Color::has_rgba() const {
  return _internal_has_rgba();
}
inline void Color::clear_rgba() {
  if (GetArena() == nullptr && rgba_ != nullptr) {
    delete rgba_;
  }
  rgba_ = nullptr;
}
inline const ::transport_catalogue_serialize::Rgba& Color::_internal_rgba() const {
  const ::transport_catalogue_serialize::Rgba* p = rgba_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Rgba&>(
      ::transport_catalogue_serialize::_Rgba_default_instance_);
}
inline const ::transport_catalogue_serialize::Rgba& Color::rgba() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Color.rgba)
  return _internal_rgba();
}
inline void Color::unsafe_arena_set_allocated_rgba(
    ::transport_catalogue_serialize::Rgba* rgba) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgba_);
  }
  rgba_ = rgba;
  if (rgba) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Color.rgba)
}
inline ::transport_catalogue_serialize::Rgba* Color::release_rgba() {
  
  ::transport_catalogue_serialize::Rgba* temp = rgba_;
  rgba_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Rgba* Color::unsafe_arena_release_rgba() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Color.rgba)
  
  ::transport_catalogue_serialize::Rgba* temp = rgba_;
  rgba_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Rgba* Color::_internal_mutable_rgba() {
  
  if (rgba_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Rgba>(GetArena());
    rgba_ = p;
  }
  return rgba_;
}
inline ::transport_catalogue_serialize::Rgba* Color::mutable_rgba() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Color.rgba)
  return _internal_mutable_rgba();
}
inline void Color::set_allocated_rgba(::transport_catalogue_serialize::Rgba* rgba) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rgba_;
  }
  if (rgba) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rgba);
    if (message_arena != submessage_arena) {
      rgba = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgba, submessage_arena);
    }
    
  } else {
    
  }
  rgba_ = rgba;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Color.rgba)
}

// -------------------------------------------------------------------

// RenderSettings

// double width = 1;
inline void RenderSettings::clear_width() {
  width_ = 0;
}
inline double RenderSettings::_internal_width() const {
  return width_;
}
inline double RenderSettings::width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.width)
  return _internal_width();
}
inline void RenderSettings::_internal_set_width(double value) {
  
  width_ = value;
}
inline void RenderSettings::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.width)
}

// double height = 2;
inline void RenderSettings::clear_height() {
  height_ = 0;
}
inline double RenderSettings::_internal_height() const {
  return height_;
}
inline double RenderSettings::height() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.height)
  return _internal_height();
}
inline void RenderSettings::_internal_set_height(double value) {
  
  height_ = value;
}
inline void RenderSettings::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.height)
}

// double padding = 3;
inline void RenderSettings::clear_padding() {
  padding_ = 0;
}
inline double RenderSettings::_internal_padding() const {
  return padding_;
}
inline double RenderSettings::padding() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.padding)
  return _internal_padding();
}
inline void RenderSettings::_internal_set_padding(double value) {
  
  padding_ = value;
}
inline void RenderSettings::set_padding(double value) {
  _internal_set_padding(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.padding)
}

// double line_width = 4;
inline void RenderSettings::clear_line_width() {
  line_width_ = 0;
}
inline double RenderSettings::_internal_line_width() const {
  return line_width_;
}
inline double RenderSettings::line_width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.line_width)
  return _internal_line_width();
}
inline void RenderSettings::_internal_set_line_width(double value) {
  
  line_width_ = value;
}
inline void RenderSettings::set_line_width(double value) {
  _internal_set_line_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.line_width)
}

// double stop_radius = 5;
inline void RenderSettings::clear_stop_radius() {
  stop_radius_ = 0;
}
inline double RenderSettings::_internal_stop_radius() const {
  return stop_radius_;
}
inline double RenderSettings::stop_radius() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.stop_radius)
  return _internal_stop_radius();
}
inline void RenderSettings::_internal_set_stop_radius(double value) {
  
  stop_radius_ = value;
}
inline void RenderSettings::set_stop_radius(double value) {
  _internal_set_stop_radius(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.stop_radius)
}

// uint32 bus_label_font_size = 6;
inline void RenderSettings::clear_bus_label_font_size() {
  bus_label_font_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::_internal_bus_label_font_size() const {
  return bus_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::bus_label_font_size() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.bus_label_font_size)
  return _internal_bus_label_font_size();
}
inline void RenderSettings::_internal_set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bus_label_font_size_ = value;
}
inline void RenderSettings::set_bus_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_bus_label_font_size(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.bus_label_font_size)
}

// .transport_catalogue_serialize.Point bus_label_offset = 7;
inline bool RenderSettings::_internal_has_bus_label_offset() const {
  return this != internal_default_instance() && bus_label_offset_ != nullptr;
}
inline bool RenderSettings::has_bus_label_offset() const {
  return _internal_has_bus_label_offset();
}
inline void RenderSettings::clear_bus_label_offset() {
  if (GetArena() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
}
inline const ::transport_catalogue_serialize::Point& RenderSettings::_internal_bus_label_offset() const {
  const ::transport_catalogue_serialize::Point* p = bus_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Point&>(
      ::transport_catalogue_serialize::_Point_default_instance_);
}
inline const ::transport_catalogue_serialize::Point& RenderSettings::bus_label_offset() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.bus_label_offset)
  return _internal_bus_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_bus_label_offset(
    ::transport_catalogue_serialize::Point* bus_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bus_label_offset_);
  }
  bus_label_offset_ = bus_label_offset;
  if (bus_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.RenderSettings.bus_label_offset)
}
inline ::transport_catalogue_serialize::Point* RenderSettings::release_bus_label_offset() {
  
  ::transport_catalogue_serialize::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::unsafe_arena_release_bus_label_offset() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.RenderSettings.bus_label_offset)
  
  ::transport_catalogue_serialize::Point* temp = bus_label_offset_;
  bus_label_offset_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::_internal_mutable_bus_label_offset() {
  
  if (bus_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Point>(GetArena());
    bus_label_offset_ = p;
  }
  return bus_label_offset_;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::mutable_bus_label_offset() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.RenderSettings.bus_label_offset)
  return _internal_mutable_bus_label_offset();
}
inline void RenderSettings::set_allocated_bus_label_offset(::transport_catalogue_serialize::Point* bus_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete bus_label_offset_;
  }
  if (bus_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bus_label_offset);
    if (message_arena != submessage_arena) {
      bus_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bus_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  bus_label_offset_ = bus_label_offset;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.RenderSettings.bus_label_offset)
}

// uint32 stop_label_font_size = 8;
inline void RenderSettings::clear_stop_label_font_size() {
  stop_label_font_size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::_internal_stop_label_font_size() const {
  return stop_label_font_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RenderSettings::stop_label_font_size() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.stop_label_font_size)
  return _internal_stop_label_font_size();
}
inline void RenderSettings::_internal_set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_label_font_size_ = value;
}
inline void RenderSettings::set_stop_label_font_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_label_font_size(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.stop_label_font_size)
}

// .transport_catalogue_serialize.Point stop_label_offset = 9;
inline bool RenderSettings::_internal_has_stop_label_offset() const {
  return this != internal_default_instance() && stop_label_offset_ != nullptr;
}
inline bool RenderSettings::has_stop_label_offset() const {
  return _internal_has_stop_label_offset();
}
inline void RenderSettings::clear_stop_label_offset() {
  if (GetArena() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
}
inline const ::transport_catalogue_serialize::Point& RenderSettings::_internal_stop_label_offset() const {
  const ::transport_catalogue_serialize::Point* p = stop_label_offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Point&>(
      ::transport_catalogue_serialize::_Point_default_instance_);
}
inline const ::transport_catalogue_serialize::Point& RenderSettings::stop_label_offset() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.stop_label_offset)
  return _internal_stop_label_offset();
}
inline void RenderSettings::unsafe_arena_set_allocated_stop_label_offset(
    ::transport_catalogue_serialize::Point* stop_label_offset) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stop_label_offset_);
  }
  stop_label_offset_ = stop_label_offset;
  if (stop_label_offset) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.RenderSettings.stop_label_offset)
}
inline ::transport_catalogue_serialize::Point* RenderSettings::release_stop_label_offset() {
  
  ::transport_catalogue_serialize::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::unsafe_arena_release_stop_label_offset() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.RenderSettings.stop_label_offset)
  
  ::transport_catalogue_serialize::Point* temp = stop_label_offset_;
  stop_label_offset_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::_internal_mutable_stop_label_offset() {
  
  if (stop_label_offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Point>(GetArena());
    stop_label_offset_ = p;
  }
  return stop_label_offset_;
}
inline ::transport_catalogue_serialize::Point* RenderSettings::mutable_stop_label_offset() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.RenderSettings.stop_label_offset)
  return _internal_mutable_stop_label_offset();
}
inline void RenderSettings::set_allocated_stop_label_offset(::transport_catalogue_serialize::Point* stop_label_offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stop_label_offset_;
  }
  if (stop_label_offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stop_label_offset);
    if (message_arena != submessage_arena) {
      stop_label_offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop_label_offset, submessage_arena);
    }
    
  } else {
    
  }
  stop_label_offset_ = stop_label_offset;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.RenderSettings.stop_label_offset)
}

// .transport_catalogue_serialize.Color underlayer_color = 10;
inline bool RenderSettings::_internal_has_underlayer_color() const {
  return this != internal_default_instance() && underlayer_color_ != nullptr;
}
inline bool RenderSettings::has_underlayer_color() const {
  return _internal_has_underlayer_color();
}
inline void RenderSettings::clear_underlayer_color() {
  if (GetArena() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
}
inline const ::transport_catalogue_serialize::Color& RenderSettings::_internal_underlayer_color() const {
  const ::transport_catalogue_serialize::Color* p = underlayer_color_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Color&>(
      ::transport_catalogue_serialize::_Color_default_instance_);
}
inline const ::transport_catalogue_serialize::Color& RenderSettings::underlayer_color() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.underlayer_color)
  return _internal_underlayer_color();
}
inline void RenderSettings::unsafe_arena_set_allocated_underlayer_color(
    ::transport_catalogue_serialize::Color* underlayer_color) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(underlayer_color_);
  }
  underlayer_color_ = underlayer_color;
  if (underlayer_color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.RenderSettings.underlayer_color)
}
inline ::transport_catalogue_serialize::Color* RenderSettings::release_underlayer_color() {
  
  ::transport_catalogue_serialize::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Color* RenderSettings::unsafe_arena_release_underlayer_color() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.RenderSettings.underlayer_color)
  
  ::transport_catalogue_serialize::Color* temp = underlayer_color_;
  underlayer_color_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Color* RenderSettings::_internal_mutable_underlayer_color() {
  
  if (underlayer_color_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Color>(GetArena());
    underlayer_color_ = p;
  }
  return underlayer_color_;
}
inline ::transport_catalogue_serialize::Color* RenderSettings::mutable_underlayer_color() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.RenderSettings.underlayer_color)
  return _internal_mutable_underlayer_color();
}
inline void RenderSettings::set_allocated_underlayer_color(::transport_catalogue_serialize::Color* underlayer_color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete underlayer_color_;
  }
  if (underlayer_color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(underlayer_color);
    if (message_arena != submessage_arena) {
      underlayer_color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, underlayer_color, submessage_arena);
    }
    
  } else {
    
  }
  underlayer_color_ = underlayer_color;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.RenderSettings.underlayer_color)
}

// double underlayer_width = 11;
inline void RenderSettings::clear_underlayer_width() {
  underlayer_width_ = 0;
}
inline double RenderSettings::_internal_underlayer_width() const {
  return underlayer_width_;
}
inline double RenderSettings::underlayer_width() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.underlayer_width)
  return _internal_underlayer_width();
}
inline void RenderSettings::_internal_set_underlayer_width(double value) {
  
  underlayer_width_ = value;
}
inline void RenderSettings::set_underlayer_width(double value) {
  _internal_set_underlayer_width(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RenderSettings.underlayer_width)
}

// repeated .transport_catalogue_serialize.Color color_palette = 12;
inline int RenderSettings::_internal_color_palette_size() const {
  return color_palette_.size();
}
inline int RenderSettings::color_palette_size() const {
  return _internal_color_palette_size();
}
inline void RenderSettings::clear_color_palette() {
  color_palette_.Clear();
}
inline ::transport_catalogue_serialize::Color* RenderSettings::mutable_color_palette(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.RenderSettings.color_palette)
  return color_palette_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >*
RenderSettings::mutable_color_palette() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.RenderSettings.color_palette)
  return &color_palette_;
}
inline const ::transport_catalogue_serialize::Color& RenderSettings::_internal_color_palette(int index) const {
  return color_palette_.Get(index);
}
inline const ::transport_catalogue_serialize::Color& RenderSettings::color_palette(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RenderSettings.color_palette)
  return _internal_color_palette(index);
}
inline ::transport_catalogue_serialize::Color* RenderSettings::_internal_add_color_palette() {
  return color_palette_.Add();
}
inline ::transport_catalogue_serialize::Color* RenderSettings::add_color_palette() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.RenderSettings.color_palette)
  return _internal_add_color_palette();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Color >&
RenderSettings::color_palette() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.RenderSettings.color_palette)
  return color_palette_;
}

// -------------------------------------------------------------------

// StopsToVertex

// bytes stop_name = 1;
inline void StopsToVertex::clear_stop_name() {
  stop_name_.ClearToEmpty();
}
inline const std::string& StopsToVertex::stop_name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.StopsToVertex.stop_name)
  return _internal_stop_name();
}
inline void StopsToVertex::set_stop_name(const std::string& value) {
  _internal_set_stop_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.StopsToVertex.stop_name)
}
inline std::string* StopsToVertex::mutable_stop_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.StopsToVertex.stop_name)
  return _internal_mutable_stop_name();
}
inline const std::string& StopsToVertex::_internal_stop_name() const {
  return stop_name_.Get();
}
inline void StopsToVertex::_internal_set_stop_name(const std::string& value) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void StopsToVertex::set_stop_name(std::string&& value) {
  
  stop_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.StopsToVertex.stop_name)
}
inline void StopsToVertex::set_stop_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.StopsToVertex.stop_name)
}
inline void StopsToVertex::set_stop_name(const void* value,
    size_t size) {
  
  stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.StopsToVertex.stop_name)
}
inline std::string* StopsToVertex::_internal_mutable_stop_name() {
  
  return stop_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* StopsToVertex::release_stop_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.StopsToVertex.stop_name)
  return stop_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopsToVertex::set_allocated_stop_name(std::string* stop_name) {
  if (stop_name != nullptr) {
    
  } else {
    
  }
  stop_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stop_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.StopsToVertex.stop_name)
}

// uint32 stop_in_id = 2;
inline void StopsToVertex::clear_stop_in_id() {
  stop_in_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToVertex::_internal_stop_in_id() const {
  return stop_in_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToVertex::stop_in_id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.StopsToVertex.stop_in_id)
  return _internal_stop_in_id();
}
inline void StopsToVertex::_internal_set_stop_in_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_in_id_ = value;
}
inline void StopsToVertex::set_stop_in_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_in_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.StopsToVertex.stop_in_id)
}

// uint32 stop_out_id = 3;
inline void StopsToVertex::clear_stop_out_id() {
  stop_out_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToVertex::_internal_stop_out_id() const {
  return stop_out_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 StopsToVertex::stop_out_id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.StopsToVertex.stop_out_id)
  return _internal_stop_out_id();
}
inline void StopsToVertex::_internal_set_stop_out_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  stop_out_id_ = value;
}
inline void StopsToVertex::set_stop_out_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_stop_out_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.StopsToVertex.stop_out_id)
}

// -------------------------------------------------------------------

// RoutingSettings

// int32 wait_time = 1;
inline void RoutingSettings::clear_wait_time() {
  wait_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::_internal_wait_time() const {
  return wait_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RoutingSettings::wait_time() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RoutingSettings.wait_time)
  return _internal_wait_time();
}
inline void RoutingSettings::_internal_set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_time_ = value;
}
inline void RoutingSettings::set_wait_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wait_time(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RoutingSettings.wait_time)
}

// double velocity = 2;
inline void RoutingSettings::clear_velocity() {
  velocity_ = 0;
}
inline double RoutingSettings::_internal_velocity() const {
  return velocity_;
}
inline double RoutingSettings::velocity() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.RoutingSettings.velocity)
  return _internal_velocity();
}
inline void RoutingSettings::_internal_set_velocity(double value) {
  
  velocity_ = value;
}
inline void RoutingSettings::set_velocity(double value) {
  _internal_set_velocity(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.RoutingSettings.velocity)
}

// -------------------------------------------------------------------

// EdgesInfo

// uint32 edge_id = 1;
inline void EdgesInfo::clear_edge_id() {
  edge_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesInfo::_internal_edge_id() const {
  return edge_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EdgesInfo::edge_id() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.EdgesInfo.edge_id)
  return _internal_edge_id();
}
inline void EdgesInfo::_internal_set_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  edge_id_ = value;
}
inline void EdgesInfo::set_edge_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_edge_id(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.EdgesInfo.edge_id)
}

// bytes name = 2;
inline void EdgesInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& EdgesInfo::name() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.EdgesInfo.name)
  return _internal_name();
}
inline void EdgesInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.EdgesInfo.name)
}
inline std::string* EdgesInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.EdgesInfo.name)
  return _internal_mutable_name();
}
inline const std::string& EdgesInfo::_internal_name() const {
  return name_.Get();
}
inline void EdgesInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EdgesInfo::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:transport_catalogue_serialize.EdgesInfo.name)
}
inline void EdgesInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:transport_catalogue_serialize.EdgesInfo.name)
}
inline void EdgesInfo::set_name(const void* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:transport_catalogue_serialize.EdgesInfo.name)
}
inline std::string* EdgesInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EdgesInfo::release_name() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.EdgesInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EdgesInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.EdgesInfo.name)
}

// double total_time = 3;
inline void EdgesInfo::clear_total_time() {
  total_time_ = 0;
}
inline double EdgesInfo::_internal_total_time() const {
  return total_time_;
}
inline double EdgesInfo::total_time() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.EdgesInfo.total_time)
  return _internal_total_time();
}
inline void EdgesInfo::_internal_set_total_time(double value) {
  
  total_time_ = value;
}
inline void EdgesInfo::set_total_time(double value) {
  _internal_set_total_time(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.EdgesInfo.total_time)
}

// bool item_type = 4;
inline void EdgesInfo::clear_item_type() {
  item_type_ = false;
}
inline bool EdgesInfo::_internal_item_type() const {
  return item_type_;
}
inline bool EdgesInfo::item_type() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.EdgesInfo.item_type)
  return _internal_item_type();
}
inline void EdgesInfo::_internal_set_item_type(bool value) {
  
  item_type_ = value;
}
inline void EdgesInfo::set_item_type(bool value) {
  _internal_set_item_type(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.EdgesInfo.item_type)
}

// int32 span_count = 5;
inline void EdgesInfo::clear_span_count() {
  span_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgesInfo::_internal_span_count() const {
  return span_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EdgesInfo::span_count() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.EdgesInfo.span_count)
  return _internal_span_count();
}
inline void EdgesInfo::_internal_set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  span_count_ = value;
}
inline void EdgesInfo::set_span_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_span_count(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.EdgesInfo.span_count)
}

// -------------------------------------------------------------------

// Edge

// uint32 from = 1;
inline void Edge::clear_from() {
  from_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_from() const {
  return from_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::from() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Edge.from)
  return _internal_from();
}
inline void Edge::_internal_set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_ = value;
}
inline void Edge::set_from(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Edge.from)
}

// uint32 to = 2;
inline void Edge::clear_to() {
  to_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::_internal_to() const {
  return to_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Edge::to() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Edge.to)
  return _internal_to();
}
inline void Edge::_internal_set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_ = value;
}
inline void Edge::set_to(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Edge.to)
}

// double weight = 3;
inline void Edge::clear_weight() {
  weight_ = 0;
}
inline double Edge::_internal_weight() const {
  return weight_;
}
inline double Edge::weight() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Edge.weight)
  return _internal_weight();
}
inline void Edge::_internal_set_weight(double value) {
  
  weight_ = value;
}
inline void Edge::set_weight(double value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Edge.weight)
}

// -------------------------------------------------------------------

// Graph

// uint32 vertex_count = 1;
inline void Graph::clear_vertex_count() {
  vertex_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Graph::_internal_vertex_count() const {
  return vertex_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Graph::vertex_count() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Graph.vertex_count)
  return _internal_vertex_count();
}
inline void Graph::_internal_set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  vertex_count_ = value;
}
inline void Graph::set_vertex_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_vertex_count(value);
  // @@protoc_insertion_point(field_set:transport_catalogue_serialize.Graph.vertex_count)
}

// repeated .transport_catalogue_serialize.Edge edge = 2;
inline int Graph::_internal_edge_size() const {
  return edge_.size();
}
inline int Graph::edge_size() const {
  return _internal_edge_size();
}
inline void Graph::clear_edge() {
  edge_.Clear();
}
inline ::transport_catalogue_serialize::Edge* Graph::mutable_edge(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Graph.edge)
  return edge_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Edge >*
Graph::mutable_edge() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Graph.edge)
  return &edge_;
}
inline const ::transport_catalogue_serialize::Edge& Graph::_internal_edge(int index) const {
  return edge_.Get(index);
}
inline const ::transport_catalogue_serialize::Edge& Graph::edge(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Graph.edge)
  return _internal_edge(index);
}
inline ::transport_catalogue_serialize::Edge* Graph::_internal_add_edge() {
  return edge_.Add();
}
inline ::transport_catalogue_serialize::Edge* Graph::add_edge() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Graph.edge)
  return _internal_add_edge();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Edge >&
Graph::edge() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Graph.edge)
  return edge_;
}

// -------------------------------------------------------------------

// Router

// .transport_catalogue_serialize.RoutingSettings routing_settings = 1;
inline bool Router::_internal_has_routing_settings() const {
  return this != internal_default_instance() && routing_settings_ != nullptr;
}
inline bool Router::has_routing_settings() const {
  return _internal_has_routing_settings();
}
inline void Router::clear_routing_settings() {
  if (GetArena() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
}
inline const ::transport_catalogue_serialize::RoutingSettings& Router::_internal_routing_settings() const {
  const ::transport_catalogue_serialize::RoutingSettings* p = routing_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::RoutingSettings&>(
      ::transport_catalogue_serialize::_RoutingSettings_default_instance_);
}
inline const ::transport_catalogue_serialize::RoutingSettings& Router::routing_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Router.routing_settings)
  return _internal_routing_settings();
}
inline void Router::unsafe_arena_set_allocated_routing_settings(
    ::transport_catalogue_serialize::RoutingSettings* routing_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(routing_settings_);
  }
  routing_settings_ = routing_settings;
  if (routing_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Router.routing_settings)
}
inline ::transport_catalogue_serialize::RoutingSettings* Router::release_routing_settings() {
  
  ::transport_catalogue_serialize::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::RoutingSettings* Router::unsafe_arena_release_routing_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Router.routing_settings)
  
  ::transport_catalogue_serialize::RoutingSettings* temp = routing_settings_;
  routing_settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::RoutingSettings* Router::_internal_mutable_routing_settings() {
  
  if (routing_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::RoutingSettings>(GetArena());
    routing_settings_ = p;
  }
  return routing_settings_;
}
inline ::transport_catalogue_serialize::RoutingSettings* Router::mutable_routing_settings() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Router.routing_settings)
  return _internal_mutable_routing_settings();
}
inline void Router::set_allocated_routing_settings(::transport_catalogue_serialize::RoutingSettings* routing_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete routing_settings_;
  }
  if (routing_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(routing_settings);
    if (message_arena != submessage_arena) {
      routing_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, routing_settings, submessage_arena);
    }
    
  } else {
    
  }
  routing_settings_ = routing_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Router.routing_settings)
}

// repeated .transport_catalogue_serialize.StopsToVertex stops_to_vertex = 2;
inline int Router::_internal_stops_to_vertex_size() const {
  return stops_to_vertex_.size();
}
inline int Router::stops_to_vertex_size() const {
  return _internal_stops_to_vertex_size();
}
inline void Router::clear_stops_to_vertex() {
  stops_to_vertex_.Clear();
}
inline ::transport_catalogue_serialize::StopsToVertex* Router::mutable_stops_to_vertex(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Router.stops_to_vertex)
  return stops_to_vertex_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::StopsToVertex >*
Router::mutable_stops_to_vertex() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Router.stops_to_vertex)
  return &stops_to_vertex_;
}
inline const ::transport_catalogue_serialize::StopsToVertex& Router::_internal_stops_to_vertex(int index) const {
  return stops_to_vertex_.Get(index);
}
inline const ::transport_catalogue_serialize::StopsToVertex& Router::stops_to_vertex(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Router.stops_to_vertex)
  return _internal_stops_to_vertex(index);
}
inline ::transport_catalogue_serialize::StopsToVertex* Router::_internal_add_stops_to_vertex() {
  return stops_to_vertex_.Add();
}
inline ::transport_catalogue_serialize::StopsToVertex* Router::add_stops_to_vertex() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Router.stops_to_vertex)
  return _internal_add_stops_to_vertex();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::StopsToVertex >&
Router::stops_to_vertex() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Router.stops_to_vertex)
  return stops_to_vertex_;
}

// repeated .transport_catalogue_serialize.EdgesInfo edges_info = 3;
inline int Router::_internal_edges_info_size() const {
  return edges_info_.size();
}
inline int Router::edges_info_size() const {
  return _internal_edges_info_size();
}
inline void Router::clear_edges_info() {
  edges_info_.Clear();
}
inline ::transport_catalogue_serialize::EdgesInfo* Router::mutable_edges_info(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Router.edges_info)
  return edges_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::EdgesInfo >*
Router::mutable_edges_info() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.Router.edges_info)
  return &edges_info_;
}
inline const ::transport_catalogue_serialize::EdgesInfo& Router::_internal_edges_info(int index) const {
  return edges_info_.Get(index);
}
inline const ::transport_catalogue_serialize::EdgesInfo& Router::edges_info(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Router.edges_info)
  return _internal_edges_info(index);
}
inline ::transport_catalogue_serialize::EdgesInfo* Router::_internal_add_edges_info() {
  return edges_info_.Add();
}
inline ::transport_catalogue_serialize::EdgesInfo* Router::add_edges_info() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.Router.edges_info)
  return _internal_add_edges_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::EdgesInfo >&
Router::edges_info() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.Router.edges_info)
  return edges_info_;
}

// .transport_catalogue_serialize.Graph graph = 4;
inline bool Router::_internal_has_graph() const {
  return this != internal_default_instance() && graph_ != nullptr;
}
inline bool Router::has_graph() const {
  return _internal_has_graph();
}
inline void Router::clear_graph() {
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
}
inline const ::transport_catalogue_serialize::Graph& Router::_internal_graph() const {
  const ::transport_catalogue_serialize::Graph* p = graph_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Graph&>(
      ::transport_catalogue_serialize::_Graph_default_instance_);
}
inline const ::transport_catalogue_serialize::Graph& Router::graph() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.Router.graph)
  return _internal_graph();
}
inline void Router::unsafe_arena_set_allocated_graph(
    ::transport_catalogue_serialize::Graph* graph) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(graph_);
  }
  graph_ = graph;
  if (graph) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.Router.graph)
}
inline ::transport_catalogue_serialize::Graph* Router::release_graph() {
  
  ::transport_catalogue_serialize::Graph* temp = graph_;
  graph_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Graph* Router::unsafe_arena_release_graph() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.Router.graph)
  
  ::transport_catalogue_serialize::Graph* temp = graph_;
  graph_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Graph* Router::_internal_mutable_graph() {
  
  if (graph_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Graph>(GetArena());
    graph_ = p;
  }
  return graph_;
}
inline ::transport_catalogue_serialize::Graph* Router::mutable_graph() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.Router.graph)
  return _internal_mutable_graph();
}
inline void Router::set_allocated_graph(::transport_catalogue_serialize::Graph* graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete graph_;
  }
  if (graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(graph);
    if (message_arena != submessage_arena) {
      graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    
  } else {
    
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.Router.graph)
}

// -------------------------------------------------------------------

// TransportCatalogue

// repeated .transport_catalogue_serialize.Stop stops = 1;
inline int TransportCatalogue::_internal_stops_size() const {
  return stops_.size();
}
inline int TransportCatalogue::stops_size() const {
  return _internal_stops_size();
}
inline void TransportCatalogue::clear_stops() {
  stops_.Clear();
}
inline ::transport_catalogue_serialize::Stop* TransportCatalogue::mutable_stops(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.stops)
  return stops_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >*
TransportCatalogue::mutable_stops() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.TransportCatalogue.stops)
  return &stops_;
}
inline const ::transport_catalogue_serialize::Stop& TransportCatalogue::_internal_stops(int index) const {
  return stops_.Get(index);
}
inline const ::transport_catalogue_serialize::Stop& TransportCatalogue::stops(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.stops)
  return _internal_stops(index);
}
inline ::transport_catalogue_serialize::Stop* TransportCatalogue::_internal_add_stops() {
  return stops_.Add();
}
inline ::transport_catalogue_serialize::Stop* TransportCatalogue::add_stops() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.TransportCatalogue.stops)
  return _internal_add_stops();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Stop >&
TransportCatalogue::stops() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.TransportCatalogue.stops)
  return stops_;
}

// repeated .transport_catalogue_serialize.Bus buses = 2;
inline int TransportCatalogue::_internal_buses_size() const {
  return buses_.size();
}
inline int TransportCatalogue::buses_size() const {
  return _internal_buses_size();
}
inline void TransportCatalogue::clear_buses() {
  buses_.Clear();
}
inline ::transport_catalogue_serialize::Bus* TransportCatalogue::mutable_buses(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.buses)
  return buses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >*
TransportCatalogue::mutable_buses() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.TransportCatalogue.buses)
  return &buses_;
}
inline const ::transport_catalogue_serialize::Bus& TransportCatalogue::_internal_buses(int index) const {
  return buses_.Get(index);
}
inline const ::transport_catalogue_serialize::Bus& TransportCatalogue::buses(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.buses)
  return _internal_buses(index);
}
inline ::transport_catalogue_serialize::Bus* TransportCatalogue::_internal_add_buses() {
  return buses_.Add();
}
inline ::transport_catalogue_serialize::Bus* TransportCatalogue::add_buses() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.TransportCatalogue.buses)
  return _internal_add_buses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Bus >&
TransportCatalogue::buses() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.TransportCatalogue.buses)
  return buses_;
}

// repeated .transport_catalogue_serialize.Distance distances = 3;
inline int TransportCatalogue::_internal_distances_size() const {
  return distances_.size();
}
inline int TransportCatalogue::distances_size() const {
  return _internal_distances_size();
}
inline void TransportCatalogue::clear_distances() {
  distances_.Clear();
}
inline ::transport_catalogue_serialize::Distance* TransportCatalogue::mutable_distances(int index) {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.distances)
  return distances_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >*
TransportCatalogue::mutable_distances() {
  // @@protoc_insertion_point(field_mutable_list:transport_catalogue_serialize.TransportCatalogue.distances)
  return &distances_;
}
inline const ::transport_catalogue_serialize::Distance& TransportCatalogue::_internal_distances(int index) const {
  return distances_.Get(index);
}
inline const ::transport_catalogue_serialize::Distance& TransportCatalogue::distances(int index) const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.distances)
  return _internal_distances(index);
}
inline ::transport_catalogue_serialize::Distance* TransportCatalogue::_internal_add_distances() {
  return distances_.Add();
}
inline ::transport_catalogue_serialize::Distance* TransportCatalogue::add_distances() {
  // @@protoc_insertion_point(field_add:transport_catalogue_serialize.TransportCatalogue.distances)
  return _internal_add_distances();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::transport_catalogue_serialize::Distance >&
TransportCatalogue::distances() const {
  // @@protoc_insertion_point(field_list:transport_catalogue_serialize.TransportCatalogue.distances)
  return distances_;
}

// .transport_catalogue_serialize.RenderSettings render_settings = 4;
inline bool TransportCatalogue::_internal_has_render_settings() const {
  return this != internal_default_instance() && render_settings_ != nullptr;
}
inline bool TransportCatalogue::has_render_settings() const {
  return _internal_has_render_settings();
}
inline void TransportCatalogue::clear_render_settings() {
  if (GetArena() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
}
inline const ::transport_catalogue_serialize::RenderSettings& TransportCatalogue::_internal_render_settings() const {
  const ::transport_catalogue_serialize::RenderSettings* p = render_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::RenderSettings&>(
      ::transport_catalogue_serialize::_RenderSettings_default_instance_);
}
inline const ::transport_catalogue_serialize::RenderSettings& TransportCatalogue::render_settings() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.render_settings)
  return _internal_render_settings();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_render_settings(
    ::transport_catalogue_serialize::RenderSettings* render_settings) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(render_settings_);
  }
  render_settings_ = render_settings;
  if (render_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.render_settings)
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::release_render_settings() {
  
  ::transport_catalogue_serialize::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::unsafe_arena_release_render_settings() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.render_settings)
  
  ::transport_catalogue_serialize::RenderSettings* temp = render_settings_;
  render_settings_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::_internal_mutable_render_settings() {
  
  if (render_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::RenderSettings>(GetArena());
    render_settings_ = p;
  }
  return render_settings_;
}
inline ::transport_catalogue_serialize::RenderSettings* TransportCatalogue::mutable_render_settings() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.render_settings)
  return _internal_mutable_render_settings();
}
inline void TransportCatalogue::set_allocated_render_settings(::transport_catalogue_serialize::RenderSettings* render_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete render_settings_;
  }
  if (render_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(render_settings);
    if (message_arena != submessage_arena) {
      render_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, render_settings, submessage_arena);
    }
    
  } else {
    
  }
  render_settings_ = render_settings;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.render_settings)
}

// .transport_catalogue_serialize.Router router = 5;
inline bool TransportCatalogue::_internal_has_router() const {
  return this != internal_default_instance() && router_ != nullptr;
}
inline bool TransportCatalogue::has_router() const {
  return _internal_has_router();
}
inline void TransportCatalogue::clear_router() {
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
}
inline const ::transport_catalogue_serialize::Router& TransportCatalogue::_internal_router() const {
  const ::transport_catalogue_serialize::Router* p = router_;
  return p != nullptr ? *p : reinterpret_cast<const ::transport_catalogue_serialize::Router&>(
      ::transport_catalogue_serialize::_Router_default_instance_);
}
inline const ::transport_catalogue_serialize::Router& TransportCatalogue::router() const {
  // @@protoc_insertion_point(field_get:transport_catalogue_serialize.TransportCatalogue.router)
  return _internal_router();
}
inline void TransportCatalogue::unsafe_arena_set_allocated_router(
    ::transport_catalogue_serialize::Router* router) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(router_);
  }
  router_ = router;
  if (router) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transport_catalogue_serialize.TransportCatalogue.router)
}
inline ::transport_catalogue_serialize::Router* TransportCatalogue::release_router() {
  
  ::transport_catalogue_serialize::Router* temp = router_;
  router_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::transport_catalogue_serialize::Router* TransportCatalogue::unsafe_arena_release_router() {
  // @@protoc_insertion_point(field_release:transport_catalogue_serialize.TransportCatalogue.router)
  
  ::transport_catalogue_serialize::Router* temp = router_;
  router_ = nullptr;
  return temp;
}
inline ::transport_catalogue_serialize::Router* TransportCatalogue::_internal_mutable_router() {
  
  if (router_ == nullptr) {
    auto* p = CreateMaybeMessage<::transport_catalogue_serialize::Router>(GetArena());
    router_ = p;
  }
  return router_;
}
inline ::transport_catalogue_serialize::Router* TransportCatalogue::mutable_router() {
  // @@protoc_insertion_point(field_mutable:transport_catalogue_serialize.TransportCatalogue.router)
  return _internal_mutable_router();
}
inline void TransportCatalogue::set_allocated_router(::transport_catalogue_serialize::Router* router) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete router_;
  }
  if (router) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(router);
    if (message_arena != submessage_arena) {
      router = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, router, submessage_arena);
    }
    
  } else {
    
  }
  router_ = router;
  // @@protoc_insertion_point(field_set_allocated:transport_catalogue_serialize.TransportCatalogue.router)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace transport_catalogue_serialize

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transport_5fcatalogue_2eproto
