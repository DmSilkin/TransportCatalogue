// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transport_catalogue.proto

#include "transport_catalogue.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace transport_catalogue_serialize {
constexpr Coordinates::Coordinates(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_(0)
  , lng_(0){}
struct CoordinatesDefaultTypeInternal {
  constexpr CoordinatesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoordinatesDefaultTypeInternal() {}
  union {
    Coordinates _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoordinatesDefaultTypeInternal _Coordinates_default_instance_;
constexpr Stop::Stop(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , coordinates_(nullptr){}
struct StopDefaultTypeInternal {
  constexpr StopDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopDefaultTypeInternal() {}
  union {
    Stop _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopDefaultTypeInternal _Stop_default_instance_;
constexpr Bus::Bus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : raw_route_()
  , route_()
  , number_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unique_stops_(0u)
  , stops_number_(0u)
  , distance_(0)
  , is_round_trip_(false){}
struct BusDefaultTypeInternal {
  constexpr BusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BusDefaultTypeInternal() {}
  union {
    Bus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BusDefaultTypeInternal _Bus_default_instance_;
constexpr Distance::Distance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , to_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , distance_(0){}
struct DistanceDefaultTypeInternal {
  constexpr DistanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DistanceDefaultTypeInternal() {}
  union {
    Distance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DistanceDefaultTypeInternal _Distance_default_instance_;
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Rgba::Rgba(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : red_(0u)
  , green_(0u)
  , opacity_(0)
  , blue_(0u){}
struct RgbaDefaultTypeInternal {
  constexpr RgbaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RgbaDefaultTypeInternal() {}
  union {
    Rgba _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RgbaDefaultTypeInternal _Rgba_default_instance_;
constexpr Color::Color(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rgba_(nullptr)
  , is_rgba_(false){}
struct ColorDefaultTypeInternal {
  constexpr ColorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ColorDefaultTypeInternal() {}
  union {
    Color _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ColorDefaultTypeInternal _Color_default_instance_;
constexpr RenderSettings::RenderSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : color_palette_()
  , bus_label_offset_(nullptr)
  , stop_label_offset_(nullptr)
  , underlayer_color_(nullptr)
  , width_(0)
  , height_(0)
  , padding_(0)
  , line_width_(0)
  , stop_radius_(0)
  , bus_label_font_size_(0u)
  , stop_label_font_size_(0u)
  , underlayer_width_(0){}
struct RenderSettingsDefaultTypeInternal {
  constexpr RenderSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RenderSettingsDefaultTypeInternal() {}
  union {
    RenderSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RenderSettingsDefaultTypeInternal _RenderSettings_default_instance_;
constexpr StopsToVertex::StopsToVertex(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stop_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , stop_in_id_(0u)
  , stop_out_id_(0u){}
struct StopsToVertexDefaultTypeInternal {
  constexpr StopsToVertexDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StopsToVertexDefaultTypeInternal() {}
  union {
    StopsToVertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StopsToVertexDefaultTypeInternal _StopsToVertex_default_instance_;
constexpr RoutingSettings::RoutingSettings(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : velocity_(0)
  , wait_time_(0){}
struct RoutingSettingsDefaultTypeInternal {
  constexpr RoutingSettingsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RoutingSettingsDefaultTypeInternal() {}
  union {
    RoutingSettings _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RoutingSettingsDefaultTypeInternal _RoutingSettings_default_instance_;
constexpr EdgesInfo::EdgesInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , edge_id_(0u)
  , item_type_(false)
  , total_time_(0)
  , span_count_(0){}
struct EdgesInfoDefaultTypeInternal {
  constexpr EdgesInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgesInfoDefaultTypeInternal() {}
  union {
    EdgesInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgesInfoDefaultTypeInternal _EdgesInfo_default_instance_;
constexpr Edge::Edge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : from_(0u)
  , to_(0u)
  , weight_(0){}
struct EdgeDefaultTypeInternal {
  constexpr EdgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EdgeDefaultTypeInternal() {}
  union {
    Edge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EdgeDefaultTypeInternal _Edge_default_instance_;
constexpr Graph::Graph(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : edge_()
  , vertex_count_(0u){}
struct GraphDefaultTypeInternal {
  constexpr GraphDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GraphDefaultTypeInternal() {}
  union {
    Graph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GraphDefaultTypeInternal _Graph_default_instance_;
constexpr Router::Router(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_to_vertex_()
  , edges_info_()
  , routing_settings_(nullptr)
  , graph_(nullptr){}
struct RouterDefaultTypeInternal {
  constexpr RouterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouterDefaultTypeInternal() {}
  union {
    Router _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouterDefaultTypeInternal _Router_default_instance_;
constexpr TransportCatalogue::TransportCatalogue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stops_()
  , buses_()
  , distances_()
  , render_settings_(nullptr)
  , router_(nullptr){}
struct TransportCatalogueDefaultTypeInternal {
  constexpr TransportCatalogueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransportCatalogueDefaultTypeInternal() {}
  union {
    TransportCatalogue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransportCatalogueDefaultTypeInternal _TransportCatalogue_default_instance_;
}  // namespace transport_catalogue_serialize
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_transport_5fcatalogue_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_transport_5fcatalogue_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_transport_5fcatalogue_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_transport_5fcatalogue_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Coordinates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Coordinates, lat_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Coordinates, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Stop, coordinates_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, unique_stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, stops_number_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, number_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, raw_route_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, route_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, is_round_trip_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Bus, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Distance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Distance, from_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Distance, to_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Distance, distance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Point, x_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Point, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, red_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, green_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, blue_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Rgba, opacity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, is_rgba_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Color, rgba_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, height_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, padding_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, line_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, stop_radius_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, bus_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, bus_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, stop_label_font_size_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, stop_label_offset_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, underlayer_color_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, underlayer_width_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RenderSettings, color_palette_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::StopsToVertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::StopsToVertex, stop_name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::StopsToVertex, stop_in_id_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::StopsToVertex, stop_out_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RoutingSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RoutingSettings, wait_time_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::RoutingSettings, velocity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, edge_id_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, name_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, total_time_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, item_type_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::EdgesInfo, span_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Edge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Edge, from_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Edge, to_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Edge, weight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Graph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Graph, vertex_count_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Graph, edge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Router, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Router, routing_settings_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Router, stops_to_vertex_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Router, edges_info_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::Router, graph_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, stops_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, buses_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, distances_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, render_settings_),
  PROTOBUF_FIELD_OFFSET(::transport_catalogue_serialize::TransportCatalogue, router_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::transport_catalogue_serialize::Coordinates)},
  { 7, -1, sizeof(::transport_catalogue_serialize::Stop)},
  { 14, -1, sizeof(::transport_catalogue_serialize::Bus)},
  { 26, -1, sizeof(::transport_catalogue_serialize::Distance)},
  { 34, -1, sizeof(::transport_catalogue_serialize::Point)},
  { 41, -1, sizeof(::transport_catalogue_serialize::Rgba)},
  { 50, -1, sizeof(::transport_catalogue_serialize::Color)},
  { 58, -1, sizeof(::transport_catalogue_serialize::RenderSettings)},
  { 75, -1, sizeof(::transport_catalogue_serialize::StopsToVertex)},
  { 83, -1, sizeof(::transport_catalogue_serialize::RoutingSettings)},
  { 90, -1, sizeof(::transport_catalogue_serialize::EdgesInfo)},
  { 100, -1, sizeof(::transport_catalogue_serialize::Edge)},
  { 108, -1, sizeof(::transport_catalogue_serialize::Graph)},
  { 115, -1, sizeof(::transport_catalogue_serialize::Router)},
  { 124, -1, sizeof(::transport_catalogue_serialize::TransportCatalogue)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Coordinates_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Bus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Distance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Rgba_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Color_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_RenderSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_StopsToVertex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_RoutingSettings_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_EdgesInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Edge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Graph_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_Router_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::transport_catalogue_serialize::_TransportCatalogue_default_instance_),
};

const char descriptor_table_protodef_transport_5fcatalogue_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031transport_catalogue.proto\022\035transport_c"
  "atalogue_serialize\"\'\n\013Coordinates\022\013\n\003lat"
  "\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\"U\n\004Stop\022\014\n\004name\030\001 \001("
  "\014\022\?\n\013coordinates\030\002 \001(\0132*.transport_catal"
  "ogue_serialize.Coordinates\"\261\001\n\003Bus\022\024\n\014un"
  "ique_stops\030\001 \001(\r\022\024\n\014stops_number\030\002 \001(\r\022\016"
  "\n\006number\030\003 \001(\014\022\021\n\traw_route\030\004 \003(\014\0222\n\005rou"
  "te\030\005 \003(\0132#.transport_catalogue_serialize"
  ".Stop\022\025\n\ris_round_trip\030\006 \001(\010\022\020\n\010distance"
  "\030\007 \001(\001\"6\n\010Distance\022\014\n\004from\030\001 \001(\014\022\n\n\002to\030\002"
  " \001(\014\022\020\n\010distance\030\003 \001(\001\"\035\n\005Point\022\t\n\001x\030\001 \001"
  "(\001\022\t\n\001y\030\002 \001(\001\"A\n\004Rgba\022\013\n\003red\030\001 \001(\r\022\r\n\005gr"
  "een\030\002 \001(\r\022\014\n\004blue\030\003 \001(\r\022\017\n\007opacity\030\004 \001(\001"
  "\"Y\n\005Color\022\017\n\007is_rgba\030\001 \001(\010\022\014\n\004name\030\002 \001(\t"
  "\0221\n\004rgba\030\003 \001(\0132#.transport_catalogue_ser"
  "ialize.Rgba\"\274\003\n\016RenderSettings\022\r\n\005width\030"
  "\001 \001(\001\022\016\n\006height\030\002 \001(\001\022\017\n\007padding\030\003 \001(\001\022\022"
  "\n\nline_width\030\004 \001(\001\022\023\n\013stop_radius\030\005 \001(\001\022"
  "\033\n\023bus_label_font_size\030\006 \001(\r\022>\n\020bus_labe"
  "l_offset\030\007 \001(\0132$.transport_catalogue_ser"
  "ialize.Point\022\034\n\024stop_label_font_size\030\010 \001"
  "(\r\022\?\n\021stop_label_offset\030\t \001(\0132$.transpor"
  "t_catalogue_serialize.Point\022>\n\020underlaye"
  "r_color\030\n \001(\0132$.transport_catalogue_seri"
  "alize.Color\022\030\n\020underlayer_width\030\013 \001(\001\022;\n"
  "\rcolor_palette\030\014 \003(\0132$.transport_catalog"
  "ue_serialize.Color\"K\n\rStopsToVertex\022\021\n\ts"
  "top_name\030\001 \001(\014\022\022\n\nstop_in_id\030\002 \001(\r\022\023\n\013st"
  "op_out_id\030\003 \001(\r\"6\n\017RoutingSettings\022\021\n\twa"
  "it_time\030\001 \001(\005\022\020\n\010velocity\030\002 \001(\001\"e\n\tEdges"
  "Info\022\017\n\007edge_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\022\n\nt"
  "otal_time\030\003 \001(\001\022\021\n\titem_type\030\004 \001(\010\022\022\n\nsp"
  "an_count\030\005 \001(\005\"0\n\004Edge\022\014\n\004from\030\001 \001(\r\022\n\n\002"
  "to\030\002 \001(\r\022\016\n\006weight\030\003 \001(\001\"P\n\005Graph\022\024\n\014ver"
  "tex_count\030\001 \001(\r\0221\n\004edge\030\002 \003(\0132#.transpor"
  "t_catalogue_serialize.Edge\"\214\002\n\006Router\022H\n"
  "\020routing_settings\030\001 \001(\0132..transport_cata"
  "logue_serialize.RoutingSettings\022E\n\017stops"
  "_to_vertex\030\002 \003(\0132,.transport_catalogue_s"
  "erialize.StopsToVertex\022<\n\nedges_info\030\003 \003"
  "(\0132(.transport_catalogue_serialize.Edges"
  "Info\0223\n\005graph\030\004 \001(\0132$.transport_catalogu"
  "e_serialize.Graph\"\266\002\n\022TransportCatalogue"
  "\0222\n\005stops\030\001 \003(\0132#.transport_catalogue_se"
  "rialize.Stop\0221\n\005buses\030\002 \003(\0132\".transport_"
  "catalogue_serialize.Bus\022:\n\tdistances\030\003 \003"
  "(\0132\'.transport_catalogue_serialize.Dista"
  "nce\022F\n\017render_settings\030\004 \001(\0132-.transport"
  "_catalogue_serialize.RenderSettings\0225\n\006r"
  "outer\030\005 \001(\0132%.transport_catalogue_serial"
  "ize.Routerb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_transport_5fcatalogue_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transport_5fcatalogue_2eproto = {
  false, false, 2018, descriptor_table_protodef_transport_5fcatalogue_2eproto, "transport_catalogue.proto", 
  &descriptor_table_transport_5fcatalogue_2eproto_once, nullptr, 0, 15,
  schemas, file_default_instances, TableStruct_transport_5fcatalogue_2eproto::offsets,
  file_level_metadata_transport_5fcatalogue_2eproto, file_level_enum_descriptors_transport_5fcatalogue_2eproto, file_level_service_descriptors_transport_5fcatalogue_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_transport_5fcatalogue_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_transport_5fcatalogue_2eproto);
  return descriptor_table_transport_5fcatalogue_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_transport_5fcatalogue_2eproto(&descriptor_table_transport_5fcatalogue_2eproto);
namespace transport_catalogue_serialize {

// ===================================================================

class Coordinates::_Internal {
 public:
};

Coordinates::Coordinates(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Coordinates)
}
Coordinates::Coordinates(const Coordinates& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Coordinates)
}

void Coordinates::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Coordinates::~Coordinates() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Coordinates)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Coordinates::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Coordinates::ArenaDtor(void* object) {
  Coordinates* _this = reinterpret_cast< Coordinates* >(object);
  (void)_this;
}
void Coordinates::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coordinates::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coordinates::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coordinates::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Coordinates::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Coordinates)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Coordinates)
  return target;
}

size_t Coordinates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Coordinates)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  if (!(this->lat() <= 0 && this->lat() >= 0)) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  if (!(this->lng() <= 0 && this->lng() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Coordinates::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  const Coordinates* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Coordinates>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Coordinates)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Coordinates)
    MergeFrom(*source);
  }
}

void Coordinates::MergeFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Coordinates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.lat() <= 0 && from.lat() >= 0)) {
    _internal_set_lat(from._internal_lat());
  }
  if (!(from.lng() <= 0 && from.lng() >= 0)) {
    _internal_set_lng(from._internal_lng());
  }
}

void Coordinates::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Coordinates::CopyFrom(const Coordinates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Coordinates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coordinates::IsInitialized() const {
  return true;
}

void Coordinates::InternalSwap(Coordinates* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coordinates, lng_)
      + sizeof(Coordinates::lng_)
      - PROTOBUF_FIELD_OFFSET(Coordinates, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coordinates::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stop::_Internal {
 public:
  static const ::transport_catalogue_serialize::Coordinates& coordinates(const Stop* msg);
};

const ::transport_catalogue_serialize::Coordinates&
Stop::_Internal::coordinates(const Stop* msg) {
  return *msg->coordinates_;
}
Stop::Stop(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Stop)
}
Stop::Stop(const Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_coordinates()) {
    coordinates_ = new ::transport_catalogue_serialize::Coordinates(*from.coordinates_);
  } else {
    coordinates_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Stop)
}

void Stop::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
coordinates_ = nullptr;
}

Stop::~Stop() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Stop)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stop::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete coordinates_;
}

void Stop::ArenaDtor(void* object) {
  Stop* _this = reinterpret_cast< Stop* >(object);
  (void)_this;
}
void Stop::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && coordinates_ != nullptr) {
    delete coordinates_;
  }
  coordinates_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Coordinates coordinates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_coordinates(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .transport_catalogue_serialize.Coordinates coordinates = 2;
  if (this->has_coordinates()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::coordinates(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Stop)
  return target;
}

size_t Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .transport_catalogue_serialize.Coordinates coordinates = 2;
  if (this->has_coordinates()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *coordinates_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Stop)
    MergeFrom(*source);
  }
}

void Stop::MergeFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_coordinates()) {
    _internal_mutable_coordinates()->::transport_catalogue_serialize::Coordinates::MergeFrom(from._internal_coordinates());
  }
}

void Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stop::CopyFrom(const Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stop::IsInitialized() const {
  return true;
}

void Stop::InternalSwap(Stop* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(coordinates_, other->coordinates_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Bus::_Internal {
 public:
};

Bus::Bus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  raw_route_(arena),
  route_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Bus)
}
Bus::Bus(const Bus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      raw_route_(from.raw_route_),
      route_(from.route_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_number().empty()) {
    number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_number(), 
      GetArena());
  }
  ::memcpy(&unique_stops_, &from.unique_stops_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_round_trip_) -
    reinterpret_cast<char*>(&unique_stops_)) + sizeof(is_round_trip_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Bus)
}

void Bus::SharedCtor() {
number_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&unique_stops_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_round_trip_) -
    reinterpret_cast<char*>(&unique_stops_)) + sizeof(is_round_trip_));
}

Bus::~Bus() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Bus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Bus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  number_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Bus::ArenaDtor(void* object) {
  Bus* _this = reinterpret_cast< Bus* >(object);
  (void)_this;
}
void Bus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Bus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Bus::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  raw_route_.Clear();
  route_.Clear();
  number_.ClearToEmpty();
  ::memset(&unique_stops_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_round_trip_) -
      reinterpret_cast<char*>(&unique_stops_)) + sizeof(is_round_trip_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Bus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 unique_stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          unique_stops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stops_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stops_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_number();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes raw_route = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_raw_route();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Stop route = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_route(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // bool is_round_trip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_round_trip_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Bus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Bus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 unique_stops = 1;
  if (this->unique_stops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_unique_stops(), target);
  }

  // uint32 stops_number = 2;
  if (this->stops_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stops_number(), target);
  }

  // bytes number = 3;
  if (this->number().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_number(), target);
  }

  // repeated bytes raw_route = 4;
  for (int i = 0, n = this->_internal_raw_route_size(); i < n; i++) {
    const auto& s = this->_internal_raw_route(i);
    target = stream->WriteBytes(4, s, target);
  }

  // repeated .transport_catalogue_serialize.Stop route = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_route_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_route(i), target, stream);
  }

  // bool is_round_trip = 6;
  if (this->is_round_trip() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_round_trip(), target);
  }

  // double distance = 7;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Bus)
  return target;
}

size_t Bus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Bus)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes raw_route = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(raw_route_.size());
  for (int i = 0, n = raw_route_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      raw_route_.Get(i));
  }

  // repeated .transport_catalogue_serialize.Stop route = 5;
  total_size += 1UL * this->_internal_route_size();
  for (const auto& msg : this->route_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes number = 3;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_number());
  }

  // uint32 unique_stops = 1;
  if (this->unique_stops() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_unique_stops());
  }

  // uint32 stops_number = 2;
  if (this->stops_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stops_number());
  }

  // double distance = 7;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  // bool is_round_trip = 6;
  if (this->is_round_trip() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  const Bus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Bus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Bus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Bus)
    MergeFrom(*source);
  }
}

void Bus::MergeFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Bus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  raw_route_.MergeFrom(from.raw_route_);
  route_.MergeFrom(from.route_);
  if (from.number().size() > 0) {
    _internal_set_number(from._internal_number());
  }
  if (from.unique_stops() != 0) {
    _internal_set_unique_stops(from._internal_unique_stops());
  }
  if (from.stops_number() != 0) {
    _internal_set_stops_number(from._internal_stops_number());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
  if (from.is_round_trip() != 0) {
    _internal_set_is_round_trip(from._internal_is_round_trip());
  }
}

void Bus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bus::CopyFrom(const Bus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Bus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bus::IsInitialized() const {
  return true;
}

void Bus::InternalSwap(Bus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  raw_route_.InternalSwap(&other->raw_route_);
  route_.InternalSwap(&other->route_);
  number_.Swap(&other->number_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bus, is_round_trip_)
      + sizeof(Bus::is_round_trip_)
      - PROTOBUF_FIELD_OFFSET(Bus, unique_stops_)>(
          reinterpret_cast<char*>(&unique_stops_),
          reinterpret_cast<char*>(&other->unique_stops_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Bus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Distance::_Internal {
 public:
};

Distance::Distance(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Distance)
}
Distance::Distance(const Distance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArena());
  }
  to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_to().empty()) {
    to_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_to(), 
      GetArena());
  }
  distance_ = from.distance_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Distance)
}

void Distance::SharedCtor() {
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
to_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
distance_ = 0;
}

Distance::~Distance() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Distance)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Distance::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  to_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Distance::ArenaDtor(void* object) {
  Distance* _this = reinterpret_cast< Distance* >(object);
  (void)_this;
}
void Distance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Distance::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  from_.ClearToEmpty();
  to_.ClearToEmpty();
  distance_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Distance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_to();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double distance = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Distance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_from(), target);
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_to(), target);
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_distance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Distance)
  return target;
}

size_t Distance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Distance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes from = 1;
  if (this->from().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_from());
  }

  // bytes to = 2;
  if (this->to().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_to());
  }

  // double distance = 3;
  if (!(this->distance() <= 0 && this->distance() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  const Distance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Distance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Distance)
    MergeFrom(*source);
  }
}

void Distance::MergeFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Distance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from().size() > 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to().size() > 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.distance() <= 0 && from.distance() >= 0)) {
    _internal_set_distance(from._internal_distance());
  }
}

void Distance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distance::CopyFrom(const Distance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Distance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distance::IsInitialized() const {
  return true;
}

void Distance::InternalSwap(Distance* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  from_.Swap(&other->from_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  to_.Swap(&other->to_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(distance_, other->distance_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Point)
}

void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, y_)
      + sizeof(Point::y_)
      - PROTOBUF_FIELD_OFFSET(Point, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Rgba::_Internal {
 public:
};

Rgba::Rgba(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Rgba)
}
Rgba::Rgba(const Rgba& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Rgba)
}

void Rgba::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&red_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

Rgba::~Rgba() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Rgba)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Rgba::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Rgba::ArenaDtor(void* object) {
  Rgba* _this = reinterpret_cast< Rgba* >(object);
  (void)_this;
}
void Rgba::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Rgba::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Rgba::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Rgba)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Rgba::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 red = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          red_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 green = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          green_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 blue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double opacity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          opacity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Rgba::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Rgba)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_red(), target);
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_green(), target);
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_blue(), target);
  }

  // double opacity = 4;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_opacity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Rgba)
  return target;
}

size_t Rgba::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Rgba)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 red = 1;
  if (this->red() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_red());
  }

  // uint32 green = 2;
  if (this->green() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_green());
  }

  // double opacity = 4;
  if (!(this->opacity() <= 0 && this->opacity() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 blue = 3;
  if (this->blue() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_blue());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rgba::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Rgba)
  GOOGLE_DCHECK_NE(&from, this);
  const Rgba* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Rgba>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Rgba)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Rgba)
    MergeFrom(*source);
  }
}

void Rgba::MergeFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Rgba)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.red() != 0) {
    _internal_set_red(from._internal_red());
  }
  if (from.green() != 0) {
    _internal_set_green(from._internal_green());
  }
  if (!(from.opacity() <= 0 && from.opacity() >= 0)) {
    _internal_set_opacity(from._internal_opacity());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
}

void Rgba::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rgba::CopyFrom(const Rgba& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Rgba)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rgba::IsInitialized() const {
  return true;
}

void Rgba::InternalSwap(Rgba* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Rgba, blue_)
      + sizeof(Rgba::blue_)
      - PROTOBUF_FIELD_OFFSET(Rgba, red_)>(
          reinterpret_cast<char*>(&red_),
          reinterpret_cast<char*>(&other->red_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Rgba::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Color::_Internal {
 public:
  static const ::transport_catalogue_serialize::Rgba& rgba(const Color* msg);
};

const ::transport_catalogue_serialize::Rgba&
Color::_Internal::rgba(const Color* msg) {
  return *msg->rgba_;
}
Color::Color(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Color)
}
Color::Color(const Color& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  if (from._internal_has_rgba()) {
    rgba_ = new ::transport_catalogue_serialize::Rgba(*from.rgba_);
  } else {
    rgba_ = nullptr;
  }
  is_rgba_ = from.is_rgba_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Color)
}

void Color::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rgba_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_rgba_) -
    reinterpret_cast<char*>(&rgba_)) + sizeof(is_rgba_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Color)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Color::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete rgba_;
}

void Color::ArenaDtor(void* object) {
  Color* _this = reinterpret_cast< Color* >(object);
  (void)_this;
}
void Color::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArena() == nullptr && rgba_ != nullptr) {
    delete rgba_;
  }
  rgba_ = nullptr;
  is_rgba_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Color::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_rgba = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_rgba_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "transport_catalogue_serialize.Color.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Rgba rgba = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rgba(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Color::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Color)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_rgba = 1;
  if (this->is_rgba() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_rgba(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "transport_catalogue_serialize.Color.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .transport_catalogue_serialize.Rgba rgba = 3;
  if (this->has_rgba()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rgba(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Color)
  return target;
}

size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Color)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .transport_catalogue_serialize.Rgba rgba = 3;
  if (this->has_rgba()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rgba_);
  }

  // bool is_rgba = 1;
  if (this->is_rgba() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Color>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Color)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_rgba()) {
    _internal_mutable_rgba()->::transport_catalogue_serialize::Rgba::MergeFrom(from._internal_rgba());
  }
  if (from.is_rgba() != 0) {
    _internal_set_is_rgba(from._internal_is_rgba());
  }
}

void Color::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  return true;
}

void Color::InternalSwap(Color* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Color, is_rgba_)
      + sizeof(Color::is_rgba_)
      - PROTOBUF_FIELD_OFFSET(Color, rgba_)>(
          reinterpret_cast<char*>(&rgba_),
          reinterpret_cast<char*>(&other->rgba_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Color::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RenderSettings::_Internal {
 public:
  static const ::transport_catalogue_serialize::Point& bus_label_offset(const RenderSettings* msg);
  static const ::transport_catalogue_serialize::Point& stop_label_offset(const RenderSettings* msg);
  static const ::transport_catalogue_serialize::Color& underlayer_color(const RenderSettings* msg);
};

const ::transport_catalogue_serialize::Point&
RenderSettings::_Internal::bus_label_offset(const RenderSettings* msg) {
  return *msg->bus_label_offset_;
}
const ::transport_catalogue_serialize::Point&
RenderSettings::_Internal::stop_label_offset(const RenderSettings* msg) {
  return *msg->stop_label_offset_;
}
const ::transport_catalogue_serialize::Color&
RenderSettings::_Internal::underlayer_color(const RenderSettings* msg) {
  return *msg->underlayer_color_;
}
RenderSettings::RenderSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  color_palette_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.RenderSettings)
}
RenderSettings::RenderSettings(const RenderSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      color_palette_(from.color_palette_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bus_label_offset()) {
    bus_label_offset_ = new ::transport_catalogue_serialize::Point(*from.bus_label_offset_);
  } else {
    bus_label_offset_ = nullptr;
  }
  if (from._internal_has_stop_label_offset()) {
    stop_label_offset_ = new ::transport_catalogue_serialize::Point(*from.stop_label_offset_);
  } else {
    stop_label_offset_ = nullptr;
  }
  if (from._internal_has_underlayer_color()) {
    underlayer_color_ = new ::transport_catalogue_serialize::Color(*from.underlayer_color_);
  } else {
    underlayer_color_ = nullptr;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&underlayer_width_) -
    reinterpret_cast<char*>(&width_)) + sizeof(underlayer_width_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.RenderSettings)
}

void RenderSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bus_label_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&underlayer_width_) -
    reinterpret_cast<char*>(&bus_label_offset_)) + sizeof(underlayer_width_));
}

RenderSettings::~RenderSettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.RenderSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RenderSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete bus_label_offset_;
  if (this != internal_default_instance()) delete stop_label_offset_;
  if (this != internal_default_instance()) delete underlayer_color_;
}

void RenderSettings::ArenaDtor(void* object) {
  RenderSettings* _this = reinterpret_cast< RenderSettings* >(object);
  (void)_this;
}
void RenderSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RenderSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  color_palette_.Clear();
  if (GetArena() == nullptr && bus_label_offset_ != nullptr) {
    delete bus_label_offset_;
  }
  bus_label_offset_ = nullptr;
  if (GetArena() == nullptr && stop_label_offset_ != nullptr) {
    delete stop_label_offset_;
  }
  stop_label_offset_ = nullptr;
  if (GetArena() == nullptr && underlayer_color_ != nullptr) {
    delete underlayer_color_;
  }
  underlayer_color_ = nullptr;
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&underlayer_width_) -
      reinterpret_cast<char*>(&width_)) + sizeof(underlayer_width_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double padding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          padding_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double line_width = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          line_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double stop_radius = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          stop_radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint32 bus_label_font_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          bus_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Point bus_label_offset = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bus_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stop_label_font_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          stop_label_font_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Point stop_label_offset = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_label_offset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Color underlayer_color = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_underlayer_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double underlayer_width = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          underlayer_width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Color color_palette = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_color_palette(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RenderSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.RenderSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_width(), target);
  }

  // double height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_height(), target);
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_padding(), target);
  }

  // double line_width = 4;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_line_width(), target);
  }

  // double stop_radius = 5;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_stop_radius(), target);
  }

  // uint32 bus_label_font_size = 6;
  if (this->bus_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_bus_label_font_size(), target);
  }

  // .transport_catalogue_serialize.Point bus_label_offset = 7;
  if (this->has_bus_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bus_label_offset(this), target, stream);
  }

  // uint32 stop_label_font_size = 8;
  if (this->stop_label_font_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_stop_label_font_size(), target);
  }

  // .transport_catalogue_serialize.Point stop_label_offset = 9;
  if (this->has_stop_label_offset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::stop_label_offset(this), target, stream);
  }

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  if (this->has_underlayer_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::underlayer_color(this), target, stream);
  }

  // double underlayer_width = 11;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_underlayer_width(), target);
  }

  // repeated .transport_catalogue_serialize.Color color_palette = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_color_palette_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_color_palette(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.RenderSettings)
  return target;
}

size_t RenderSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.RenderSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Color color_palette = 12;
  total_size += 1UL * this->_internal_color_palette_size();
  for (const auto& msg : this->color_palette_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalogue_serialize.Point bus_label_offset = 7;
  if (this->has_bus_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *bus_label_offset_);
  }

  // .transport_catalogue_serialize.Point stop_label_offset = 9;
  if (this->has_stop_label_offset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stop_label_offset_);
  }

  // .transport_catalogue_serialize.Color underlayer_color = 10;
  if (this->has_underlayer_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *underlayer_color_);
  }

  // double width = 1;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 2;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double padding = 3;
  if (!(this->padding() <= 0 && this->padding() >= 0)) {
    total_size += 1 + 8;
  }

  // double line_width = 4;
  if (!(this->line_width() <= 0 && this->line_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double stop_radius = 5;
  if (!(this->stop_radius() <= 0 && this->stop_radius() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 bus_label_font_size = 6;
  if (this->bus_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_bus_label_font_size());
  }

  // uint32 stop_label_font_size = 8;
  if (this->stop_label_font_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_label_font_size());
  }

  // double underlayer_width = 11;
  if (!(this->underlayer_width() <= 0 && this->underlayer_width() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RenderSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RenderSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RenderSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.RenderSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.RenderSettings)
    MergeFrom(*source);
  }
}

void RenderSettings::MergeFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.RenderSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  color_palette_.MergeFrom(from.color_palette_);
  if (from.has_bus_label_offset()) {
    _internal_mutable_bus_label_offset()->::transport_catalogue_serialize::Point::MergeFrom(from._internal_bus_label_offset());
  }
  if (from.has_stop_label_offset()) {
    _internal_mutable_stop_label_offset()->::transport_catalogue_serialize::Point::MergeFrom(from._internal_stop_label_offset());
  }
  if (from.has_underlayer_color()) {
    _internal_mutable_underlayer_color()->::transport_catalogue_serialize::Color::MergeFrom(from._internal_underlayer_color());
  }
  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.padding() <= 0 && from.padding() >= 0)) {
    _internal_set_padding(from._internal_padding());
  }
  if (!(from.line_width() <= 0 && from.line_width() >= 0)) {
    _internal_set_line_width(from._internal_line_width());
  }
  if (!(from.stop_radius() <= 0 && from.stop_radius() >= 0)) {
    _internal_set_stop_radius(from._internal_stop_radius());
  }
  if (from.bus_label_font_size() != 0) {
    _internal_set_bus_label_font_size(from._internal_bus_label_font_size());
  }
  if (from.stop_label_font_size() != 0) {
    _internal_set_stop_label_font_size(from._internal_stop_label_font_size());
  }
  if (!(from.underlayer_width() <= 0 && from.underlayer_width() >= 0)) {
    _internal_set_underlayer_width(from._internal_underlayer_width());
  }
}

void RenderSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenderSettings::CopyFrom(const RenderSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.RenderSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderSettings::IsInitialized() const {
  return true;
}

void RenderSettings::InternalSwap(RenderSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  color_palette_.InternalSwap(&other->color_palette_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RenderSettings, underlayer_width_)
      + sizeof(RenderSettings::underlayer_width_)
      - PROTOBUF_FIELD_OFFSET(RenderSettings, bus_label_offset_)>(
          reinterpret_cast<char*>(&bus_label_offset_),
          reinterpret_cast<char*>(&other->bus_label_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StopsToVertex::_Internal {
 public:
};

StopsToVertex::StopsToVertex(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.StopsToVertex)
}
StopsToVertex::StopsToVertex(const StopsToVertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stop_name().empty()) {
    stop_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stop_name(), 
      GetArena());
  }
  ::memcpy(&stop_in_id_, &from.stop_in_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_out_id_) -
    reinterpret_cast<char*>(&stop_in_id_)) + sizeof(stop_out_id_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.StopsToVertex)
}

void StopsToVertex::SharedCtor() {
stop_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&stop_in_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stop_out_id_) -
    reinterpret_cast<char*>(&stop_in_id_)) + sizeof(stop_out_id_));
}

StopsToVertex::~StopsToVertex() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.StopsToVertex)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StopsToVertex::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  stop_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StopsToVertex::ArenaDtor(void* object) {
  StopsToVertex* _this = reinterpret_cast< StopsToVertex* >(object);
  (void)_this;
}
void StopsToVertex::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StopsToVertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StopsToVertex::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.StopsToVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stop_name_.ClearToEmpty();
  ::memset(&stop_in_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_out_id_) -
      reinterpret_cast<char*>(&stop_in_id_)) + sizeof(stop_out_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopsToVertex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes stop_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stop_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stop_in_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          stop_in_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 stop_out_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          stop_out_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopsToVertex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.StopsToVertex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes stop_name = 1;
  if (this->stop_name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_stop_name(), target);
  }

  // uint32 stop_in_id = 2;
  if (this->stop_in_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_stop_in_id(), target);
  }

  // uint32 stop_out_id = 3;
  if (this->stop_out_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_stop_out_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.StopsToVertex)
  return target;
}

size_t StopsToVertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.StopsToVertex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes stop_name = 1;
  if (this->stop_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_stop_name());
  }

  // uint32 stop_in_id = 2;
  if (this->stop_in_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_in_id());
  }

  // uint32 stop_out_id = 3;
  if (this->stop_out_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_stop_out_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopsToVertex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.StopsToVertex)
  GOOGLE_DCHECK_NE(&from, this);
  const StopsToVertex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopsToVertex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.StopsToVertex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.StopsToVertex)
    MergeFrom(*source);
  }
}

void StopsToVertex::MergeFrom(const StopsToVertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.StopsToVertex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.stop_name().size() > 0) {
    _internal_set_stop_name(from._internal_stop_name());
  }
  if (from.stop_in_id() != 0) {
    _internal_set_stop_in_id(from._internal_stop_in_id());
  }
  if (from.stop_out_id() != 0) {
    _internal_set_stop_out_id(from._internal_stop_out_id());
  }
}

void StopsToVertex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.StopsToVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopsToVertex::CopyFrom(const StopsToVertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.StopsToVertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopsToVertex::IsInitialized() const {
  return true;
}

void StopsToVertex::InternalSwap(StopsToVertex* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stop_name_.Swap(&other->stop_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StopsToVertex, stop_out_id_)
      + sizeof(StopsToVertex::stop_out_id_)
      - PROTOBUF_FIELD_OFFSET(StopsToVertex, stop_in_id_)>(
          reinterpret_cast<char*>(&stop_in_id_),
          reinterpret_cast<char*>(&other->stop_in_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StopsToVertex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class RoutingSettings::_Internal {
 public:
};

RoutingSettings::RoutingSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.RoutingSettings)
}
RoutingSettings::RoutingSettings(const RoutingSettings& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_, &from.velocity_,
    static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.RoutingSettings)
}

void RoutingSettings::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&velocity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&wait_time_) -
    reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
}

RoutingSettings::~RoutingSettings() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.RoutingSettings)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoutingSettings::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoutingSettings::ArenaDtor(void* object) {
  RoutingSettings* _this = reinterpret_cast< RoutingSettings* >(object);
  (void)_this;
}
void RoutingSettings::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoutingSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RoutingSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wait_time_) -
      reinterpret_cast<char*>(&velocity_)) + sizeof(wait_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoutingSettings::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 wait_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          wait_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double velocity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoutingSettings::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.RoutingSettings)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 wait_time = 1;
  if (this->wait_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_wait_time(), target);
  }

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_velocity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.RoutingSettings)
  return target;
}

size_t RoutingSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.RoutingSettings)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double velocity = 2;
  if (!(this->velocity() <= 0 && this->velocity() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 wait_time = 1;
  if (this->wait_time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wait_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoutingSettings::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const RoutingSettings* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoutingSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.RoutingSettings)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.RoutingSettings)
    MergeFrom(*source);
  }
}

void RoutingSettings::MergeFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.RoutingSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity() <= 0 && from.velocity() >= 0)) {
    _internal_set_velocity(from._internal_velocity());
  }
  if (from.wait_time() != 0) {
    _internal_set_wait_time(from._internal_wait_time());
  }
}

void RoutingSettings::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutingSettings::CopyFrom(const RoutingSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.RoutingSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutingSettings::IsInitialized() const {
  return true;
}

void RoutingSettings::InternalSwap(RoutingSettings* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoutingSettings, wait_time_)
      + sizeof(RoutingSettings::wait_time_)
      - PROTOBUF_FIELD_OFFSET(RoutingSettings, velocity_)>(
          reinterpret_cast<char*>(&velocity_),
          reinterpret_cast<char*>(&other->velocity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoutingSettings::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class EdgesInfo::_Internal {
 public:
};

EdgesInfo::EdgesInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.EdgesInfo)
}
EdgesInfo::EdgesInfo(const EdgesInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&edge_id_, &from.edge_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&edge_id_)) + sizeof(span_count_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.EdgesInfo)
}

void EdgesInfo::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&edge_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&span_count_) -
    reinterpret_cast<char*>(&edge_id_)) + sizeof(span_count_));
}

EdgesInfo::~EdgesInfo() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.EdgesInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EdgesInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EdgesInfo::ArenaDtor(void* object) {
  EdgesInfo* _this = reinterpret_cast< EdgesInfo* >(object);
  (void)_this;
}
void EdgesInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EdgesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EdgesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.EdgesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&edge_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&span_count_) -
      reinterpret_cast<char*>(&edge_id_)) + sizeof(span_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EdgesInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 edge_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          edge_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double total_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool item_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          item_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 span_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          span_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EdgesInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.EdgesInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 edge_id = 1;
  if (this->edge_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_edge_id(), target);
  }

  // bytes name = 2;
  if (this->name().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // double total_time = 3;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_total_time(), target);
  }

  // bool item_type = 4;
  if (this->item_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_item_type(), target);
  }

  // int32 span_count = 5;
  if (this->span_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_span_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.EdgesInfo)
  return target;
}

size_t EdgesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.EdgesInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // uint32 edge_id = 1;
  if (this->edge_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_edge_id());
  }

  // bool item_type = 4;
  if (this->item_type() != 0) {
    total_size += 1 + 1;
  }

  // double total_time = 3;
  if (!(this->total_time() <= 0 && this->total_time() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 span_count = 5;
  if (this->span_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_span_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EdgesInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.EdgesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const EdgesInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EdgesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.EdgesInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.EdgesInfo)
    MergeFrom(*source);
  }
}

void EdgesInfo::MergeFrom(const EdgesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.EdgesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.edge_id() != 0) {
    _internal_set_edge_id(from._internal_edge_id());
  }
  if (from.item_type() != 0) {
    _internal_set_item_type(from._internal_item_type());
  }
  if (!(from.total_time() <= 0 && from.total_time() >= 0)) {
    _internal_set_total_time(from._internal_total_time());
  }
  if (from.span_count() != 0) {
    _internal_set_span_count(from._internal_span_count());
  }
}

void EdgesInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.EdgesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EdgesInfo::CopyFrom(const EdgesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.EdgesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EdgesInfo::IsInitialized() const {
  return true;
}

void EdgesInfo::InternalSwap(EdgesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EdgesInfo, span_count_)
      + sizeof(EdgesInfo::span_count_)
      - PROTOBUF_FIELD_OFFSET(EdgesInfo, edge_id_)>(
          reinterpret_cast<char*>(&edge_id_),
          reinterpret_cast<char*>(&other->edge_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EdgesInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Edge::_Internal {
 public:
};

Edge::Edge(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Edge)
}
Edge::Edge(const Edge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&from_, &from.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Edge)
}

void Edge::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&from_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&from_)) + sizeof(weight_));
}

Edge::~Edge() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Edge)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Edge::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Edge::ArenaDtor(void* object) {
  Edge* _this = reinterpret_cast< Edge* >(object);
  (void)_this;
}
void Edge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Edge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&from_)) + sizeof(weight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Edge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 to = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          to_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double weight = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Edge::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Edge)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_from(), target);
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_to(), target);
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_weight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Edge)
  return target;
}

size_t Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Edge)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 from = 1;
  if (this->from() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_from());
  }

  // uint32 to = 2;
  if (this->to() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_to());
  }

  // double weight = 3;
  if (!(this->weight() <= 0 && this->weight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Edge::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  const Edge* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Edge>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Edge)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Edge)
    MergeFrom(*source);
  }
}

void Edge::MergeFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.from() != 0) {
    _internal_set_from(from._internal_from());
  }
  if (from.to() != 0) {
    _internal_set_to(from._internal_to());
  }
  if (!(from.weight() <= 0 && from.weight() >= 0)) {
    _internal_set_weight(from._internal_weight());
  }
}

void Edge::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Edge::CopyFrom(const Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Edge::IsInitialized() const {
  return true;
}

void Edge::InternalSwap(Edge* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Edge, weight_)
      + sizeof(Edge::weight_)
      - PROTOBUF_FIELD_OFFSET(Edge, from_)>(
          reinterpret_cast<char*>(&from_),
          reinterpret_cast<char*>(&other->from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Edge::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Graph::_Internal {
 public:
};

Graph::Graph(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  edge_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Graph)
}
Graph::Graph(const Graph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      edge_(from.edge_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  vertex_count_ = from.vertex_count_;
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Graph)
}

void Graph::SharedCtor() {
vertex_count_ = 0u;
}

Graph::~Graph() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Graph)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Graph::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Graph::ArenaDtor(void* object) {
  Graph* _this = reinterpret_cast< Graph* >(object);
  (void)_this;
}
void Graph::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Graph::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Graph::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  edge_.Clear();
  vertex_count_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Graph::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 vertex_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          vertex_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Edge edge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edge(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Graph::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Graph)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 vertex_count = 1;
  if (this->vertex_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_vertex_count(), target);
  }

  // repeated .transport_catalogue_serialize.Edge edge = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edge_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_edge(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Graph)
  return target;
}

size_t Graph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Graph)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Edge edge = 2;
  total_size += 1UL * this->_internal_edge_size();
  for (const auto& msg : this->edge_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint32 vertex_count = 1;
  if (this->vertex_count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_vertex_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graph::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  const Graph* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Graph>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Graph)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Graph)
    MergeFrom(*source);
  }
}

void Graph::MergeFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Graph)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  edge_.MergeFrom(from.edge_);
  if (from.vertex_count() != 0) {
    _internal_set_vertex_count(from._internal_vertex_count());
  }
}

void Graph::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graph::CopyFrom(const Graph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Graph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graph::IsInitialized() const {
  return true;
}

void Graph::InternalSwap(Graph* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  edge_.InternalSwap(&other->edge_);
  swap(vertex_count_, other->vertex_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Graph::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Router::_Internal {
 public:
  static const ::transport_catalogue_serialize::RoutingSettings& routing_settings(const Router* msg);
  static const ::transport_catalogue_serialize::Graph& graph(const Router* msg);
};

const ::transport_catalogue_serialize::RoutingSettings&
Router::_Internal::routing_settings(const Router* msg) {
  return *msg->routing_settings_;
}
const ::transport_catalogue_serialize::Graph&
Router::_Internal::graph(const Router* msg) {
  return *msg->graph_;
}
Router::Router(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_to_vertex_(arena),
  edges_info_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.Router)
}
Router::Router(const Router& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_to_vertex_(from.stops_to_vertex_),
      edges_info_(from.edges_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_routing_settings()) {
    routing_settings_ = new ::transport_catalogue_serialize::RoutingSettings(*from.routing_settings_);
  } else {
    routing_settings_ = nullptr;
  }
  if (from._internal_has_graph()) {
    graph_ = new ::transport_catalogue_serialize::Graph(*from.graph_);
  } else {
    graph_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.Router)
}

void Router::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&routing_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&graph_) -
    reinterpret_cast<char*>(&routing_settings_)) + sizeof(graph_));
}

Router::~Router() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.Router)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Router::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete routing_settings_;
  if (this != internal_default_instance()) delete graph_;
}

void Router::ArenaDtor(void* object) {
  Router* _this = reinterpret_cast< Router* >(object);
  (void)_this;
}
void Router::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Router::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Router::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_to_vertex_.Clear();
  edges_info_.Clear();
  if (GetArena() == nullptr && routing_settings_ != nullptr) {
    delete routing_settings_;
  }
  routing_settings_ = nullptr;
  if (GetArena() == nullptr && graph_ != nullptr) {
    delete graph_;
  }
  graph_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Router::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .transport_catalogue_serialize.RoutingSettings routing_settings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_routing_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.StopsToVertex stops_to_vertex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops_to_vertex(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.EdgesInfo edges_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Graph graph = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Router::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.Router)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .transport_catalogue_serialize.RoutingSettings routing_settings = 1;
  if (this->has_routing_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::routing_settings(this), target, stream);
  }

  // repeated .transport_catalogue_serialize.StopsToVertex stops_to_vertex = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_to_vertex_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_stops_to_vertex(i), target, stream);
  }

  // repeated .transport_catalogue_serialize.EdgesInfo edges_info = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_edges_info(i), target, stream);
  }

  // .transport_catalogue_serialize.Graph graph = 4;
  if (this->has_graph()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::graph(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.Router)
  return target;
}

size_t Router::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.Router)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.StopsToVertex stops_to_vertex = 2;
  total_size += 1UL * this->_internal_stops_to_vertex_size();
  for (const auto& msg : this->stops_to_vertex_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_serialize.EdgesInfo edges_info = 3;
  total_size += 1UL * this->_internal_edges_info_size();
  for (const auto& msg : this->edges_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalogue_serialize.RoutingSettings routing_settings = 1;
  if (this->has_routing_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *routing_settings_);
  }

  // .transport_catalogue_serialize.Graph graph = 4;
  if (this->has_graph()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Router::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.Router)
  GOOGLE_DCHECK_NE(&from, this);
  const Router* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Router>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.Router)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.Router)
    MergeFrom(*source);
  }
}

void Router::MergeFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.Router)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_to_vertex_.MergeFrom(from.stops_to_vertex_);
  edges_info_.MergeFrom(from.edges_info_);
  if (from.has_routing_settings()) {
    _internal_mutable_routing_settings()->::transport_catalogue_serialize::RoutingSettings::MergeFrom(from._internal_routing_settings());
  }
  if (from.has_graph()) {
    _internal_mutable_graph()->::transport_catalogue_serialize::Graph::MergeFrom(from._internal_graph());
  }
}

void Router::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Router::CopyFrom(const Router& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.Router)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Router::IsInitialized() const {
  return true;
}

void Router::InternalSwap(Router* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops_to_vertex_.InternalSwap(&other->stops_to_vertex_);
  edges_info_.InternalSwap(&other->edges_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Router, graph_)
      + sizeof(Router::graph_)
      - PROTOBUF_FIELD_OFFSET(Router, routing_settings_)>(
          reinterpret_cast<char*>(&routing_settings_),
          reinterpret_cast<char*>(&other->routing_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Router::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TransportCatalogue::_Internal {
 public:
  static const ::transport_catalogue_serialize::RenderSettings& render_settings(const TransportCatalogue* msg);
  static const ::transport_catalogue_serialize::Router& router(const TransportCatalogue* msg);
};

const ::transport_catalogue_serialize::RenderSettings&
TransportCatalogue::_Internal::render_settings(const TransportCatalogue* msg) {
  return *msg->render_settings_;
}
const ::transport_catalogue_serialize::Router&
TransportCatalogue::_Internal::router(const TransportCatalogue* msg) {
  return *msg->router_;
}
TransportCatalogue::TransportCatalogue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  stops_(arena),
  buses_(arena),
  distances_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:transport_catalogue_serialize.TransportCatalogue)
}
TransportCatalogue::TransportCatalogue(const TransportCatalogue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      stops_(from.stops_),
      buses_(from.buses_),
      distances_(from.distances_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_render_settings()) {
    render_settings_ = new ::transport_catalogue_serialize::RenderSettings(*from.render_settings_);
  } else {
    render_settings_ = nullptr;
  }
  if (from._internal_has_router()) {
    router_ = new ::transport_catalogue_serialize::Router(*from.router_);
  } else {
    router_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:transport_catalogue_serialize.TransportCatalogue)
}

void TransportCatalogue::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&render_settings_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&router_) -
    reinterpret_cast<char*>(&render_settings_)) + sizeof(router_));
}

TransportCatalogue::~TransportCatalogue() {
  // @@protoc_insertion_point(destructor:transport_catalogue_serialize.TransportCatalogue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TransportCatalogue::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete render_settings_;
  if (this != internal_default_instance()) delete router_;
}

void TransportCatalogue::ArenaDtor(void* object) {
  TransportCatalogue* _this = reinterpret_cast< TransportCatalogue* >(object);
  (void)_this;
}
void TransportCatalogue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransportCatalogue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransportCatalogue::Clear() {
// @@protoc_insertion_point(message_clear_start:transport_catalogue_serialize.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stops_.Clear();
  buses_.Clear();
  distances_.Clear();
  if (GetArena() == nullptr && render_settings_ != nullptr) {
    delete render_settings_;
  }
  render_settings_ = nullptr;
  if (GetArena() == nullptr && router_ != nullptr) {
    delete router_;
  }
  router_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransportCatalogue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .transport_catalogue_serialize.Stop stops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stops(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Bus buses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .transport_catalogue_serialize.Distance distances = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_distances(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.RenderSettings render_settings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_render_settings(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .transport_catalogue_serialize.Router router = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_router(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TransportCatalogue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:transport_catalogue_serialize.TransportCatalogue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Stop stops = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_stops_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_stops(i), target, stream);
  }

  // repeated .transport_catalogue_serialize.Bus buses = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_buses(i), target, stream);
  }

  // repeated .transport_catalogue_serialize.Distance distances = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_distances_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_distances(i), target, stream);
  }

  // .transport_catalogue_serialize.RenderSettings render_settings = 4;
  if (this->has_render_settings()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::render_settings(this), target, stream);
  }

  // .transport_catalogue_serialize.Router router = 5;
  if (this->has_router()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::router(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:transport_catalogue_serialize.TransportCatalogue)
  return target;
}

size_t TransportCatalogue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:transport_catalogue_serialize.TransportCatalogue)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .transport_catalogue_serialize.Stop stops = 1;
  total_size += 1UL * this->_internal_stops_size();
  for (const auto& msg : this->stops_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_serialize.Bus buses = 2;
  total_size += 1UL * this->_internal_buses_size();
  for (const auto& msg : this->buses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .transport_catalogue_serialize.Distance distances = 3;
  total_size += 1UL * this->_internal_distances_size();
  for (const auto& msg : this->distances_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .transport_catalogue_serialize.RenderSettings render_settings = 4;
  if (this->has_render_settings()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *render_settings_);
  }

  // .transport_catalogue_serialize.Router router = 5;
  if (this->has_router()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *router_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TransportCatalogue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:transport_catalogue_serialize.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  const TransportCatalogue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TransportCatalogue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:transport_catalogue_serialize.TransportCatalogue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:transport_catalogue_serialize.TransportCatalogue)
    MergeFrom(*source);
  }
}

void TransportCatalogue::MergeFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:transport_catalogue_serialize.TransportCatalogue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stops_.MergeFrom(from.stops_);
  buses_.MergeFrom(from.buses_);
  distances_.MergeFrom(from.distances_);
  if (from.has_render_settings()) {
    _internal_mutable_render_settings()->::transport_catalogue_serialize::RenderSettings::MergeFrom(from._internal_render_settings());
  }
  if (from.has_router()) {
    _internal_mutable_router()->::transport_catalogue_serialize::Router::MergeFrom(from._internal_router());
  }
}

void TransportCatalogue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:transport_catalogue_serialize.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportCatalogue::CopyFrom(const TransportCatalogue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:transport_catalogue_serialize.TransportCatalogue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportCatalogue::IsInitialized() const {
  return true;
}

void TransportCatalogue::InternalSwap(TransportCatalogue* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  stops_.InternalSwap(&other->stops_);
  buses_.InternalSwap(&other->buses_);
  distances_.InternalSwap(&other->distances_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransportCatalogue, router_)
      + sizeof(TransportCatalogue::router_)
      - PROTOBUF_FIELD_OFFSET(TransportCatalogue, render_settings_)>(
          reinterpret_cast<char*>(&render_settings_),
          reinterpret_cast<char*>(&other->render_settings_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransportCatalogue::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace transport_catalogue_serialize
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Coordinates* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Coordinates >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Coordinates >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Stop* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Stop >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Bus* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Bus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Bus >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Distance* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Distance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Distance >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Point* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Rgba* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Rgba >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Rgba >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Color* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Color >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Color >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::RenderSettings* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::RenderSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::RenderSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::StopsToVertex* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::StopsToVertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::StopsToVertex >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::RoutingSettings* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::RoutingSettings >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::RoutingSettings >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::EdgesInfo* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::EdgesInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::EdgesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Edge* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Edge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Edge >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Graph* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Graph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Graph >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::Router* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::Router >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::Router >(arena);
}
template<> PROTOBUF_NOINLINE ::transport_catalogue_serialize::TransportCatalogue* Arena::CreateMaybeMessage< ::transport_catalogue_serialize::TransportCatalogue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::transport_catalogue_serialize::TransportCatalogue >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
